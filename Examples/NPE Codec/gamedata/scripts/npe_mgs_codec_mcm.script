

local printlog = npe_director.Printlog_npe
local printdebug = npe_director.Printdebug_npe

-- custom functors

function has_codec()
    return npe_events.owns_item("mgs_codec")
end


-- Actions and Events use functors definitions which must support the <functor> interface
-- { "<script_name>", "<function_name>", "any_params".. }

-- Actions must support the <npe_executable> interface, which is
-- { name = <executable_id:string>, functor {functor_interface}, delay = <delay:int> }
local ACTION = {
    NOOSPHERE_BUFF = {
        name = "noosphere_buff", -- action id (choose what you want) 
        descr = "Noosphere Buff", -- decr (choose what you want)
        functor = {"npe_actions", "set_all_psy_ppe_effects", 5, "nanomachines" },
        delay = 0, -- not used
    },
    ADD_CODEC_TO_STASH = {
        name = "add_codec_to_stash",
        descr = "Add Codec To Stash",
        functor = {"npe_actions", "add_to_stash", {"mgs_codec"}, 15340 }, -- 15340=sidorovich box
        delay = 10, -- not used
    },
    ADD_BINO_TO_STASH = {
        name = "add_bino_to_stash",
        descr = "Add Binocular To Stash",
        functor = {"npe_actions", "add_to_stash", {"wpn_binoc_inv"}, 15340 }, -- 15340=sidorovich box
        delay = 10, -- not used
    },
    ADD_MILGEAR_TO_STASH = {
        name = "add_milgear_to_stash",
        descr = "Add Military uniform To Stash",
        functor = {"npe_actions", "add_to_stash", {"wpn_binoc_inv"}, 15340 }, -- 15340=sidorovich box
        delay = 10, -- not used
    },         
    CREATE_TASK_FIND_CODEC = {
        name = "task_find_codec",
        descr = "Find the codec",
        functor = {
                    "npe_actions", "create_task", -- action functor for creating tasks
                    "Recover the codec", "Somebody stole your codec, find it", -- task title and description
                    15340,  -- target_id = 15340   sidorovich box
                    {"npe_events", "owns_item", "mgs_codec"} -- completion condition functor (optional)
        }, 
        delay = 10, -- not used
    },
    CREATE_TASK_G0_TO_THE_CAR_PARK = {
        name = "go_to_the_car_park",
        descr = "Go to the car park",
        functor = {
                    "npe_actions", "create_task", -- action functor for creating tasks
                    "Go to the car park", "Go to the car part and look around for an army uniform, if you can find one", -- task title and description
                    15228,  -- target_id = 15228 fireplace
        }, 
        delay = 10, -- not used
    },    
}

-- events are used to trigger the various sets (a set is a particular tutorial or quest stage)

-- Events must define an handler that support the <npe_executable> interface, which is
-- { name = <executable_id:string>, functors {{functor_interface}, ... }}
local EVENT = {
    OLD_FRIEND = { 
        name = "Old Friend", 
        handler = { 
            name = "on_old_friend_eligible",
            functors = {
                {"npe_mgs_codec_mcm", "has_codec" },
                {"npe_events", "on_sets_completed", "mgs_codec", {"nanomachines"} },
            }
        } 
    },  
    WE_NEED_A_PLAN = { 
        name = "We Need A Plan",
        handler = { 
            name = "on_we_need_a_plan_eligible",
            functors = {
                {"npe_events", "on_sets_completed", "mgs_codec", {"old_friend"} },
            }
        } 
    },   
    LOOK_FOR_HELP = { 
        name = "Look For Help",
        handler = { 
            name = "on_look_for_help_eligible",
            functors = {{"npe_events", "on_sets_completed", "mgs_codec", {"old_friend", "we_need_a_plan"} }}
        } 
    },   
    FANATIC_BOARS = { 
        name = "Fanatic Boars",
        handler = { 
            name = "on_fanatic_boars_task_received",
            functors = {{"npe_events", "is_on_task", npe.TASK.fanatic_training_day_boar_hunting }}
        } 
    },         
    SAVE_THE_CURIER = { 
        name = "Save The Curier",
        handler = { 
            name = "on_save_the_curier_task_received",
            functors = {{"npe_events", "is_on_task", npe.TASK.wolf_rescue_courier_from_cordon }}
        } 
    },   
    WARN_TOWARDS_MILITARY = { 
        name = "Towards Military Base", 
        handler = { 
            name = "warn_on_towards_military_base",
            functors = {{"npe_events", "on_near_game_object", 15740, 190}}
        } 
    },      
    DANGER_NEAR_MILITARY = { 
        name = "Near Military Base", 
        handler = { 
            name = "warn_on_near_military_base",
            functors = {{"npe_events","on_near_game_object", 15740, 120 }}
        } 
    },
    CARPARK_OUTLOOK = { 
        name = "Approach Car Park", 
        handler = { 
            name = "approach_carpark",
            functors = {{"npe_events","on_near_game_object", 15228, 30 }}
        } 
    },          
}

ACTORS = {
    SNAKE = "Snake",
    OTACON = "Otacon",
}

local deck_npe_mgs_codec = { 
    title = "MGS Codec", 
    module= "mgs_codec", 
    id="mgs_codec", 
    dialog= npe.DIALOG.UI_CODEC,
    sets = {
        {   -- the introcutory set (it's where the quest starts)
            dialog= npe.DIALOG.UI_QUEST, -- we will use the quest dialog to show the introduction
            id = "nanomachines",
            title = "ui_mcm_npe_module_mgs_codec_nanomachines_set_title",
            start_actions = {
                ACTION.NOOSPHERE_BUFF, -- we give a buff to the player
                ACTION.ADD_CODEC_TO_STASH,  -- we add the codec (quest item) to the stash
                ACTION.ADD_BINO_TO_STASH -- we add the binoculats as a nod to Metal Gear Solid Snake (PS1)
            },
            start_sounds = { 
                [1] = { 
                    sound = "npe\\mgs_codec\\voiceover\\snake\\what",
                    delay = 2
                },
            },
            cards = {
                [1] = {
                    title = "ui_mgs_codec_nanomachines_card1_title",
                    description = "ui_mgs_codec_nanomachines_card1_message",
                    image = "ui_mgs_codec_nanomachines_card1_wish_granter",
                },
                [2] = {
                    title = "ui_mgs_codec_nanomachines_card2_title",
                    description = "ui_mgs_codec_nanomachines_card2_message",
                    image = "ui_mgs_codec_nanomachines_card2_sidorovich",
                },                          
            },
            context = { --- The context is the dlc start event which is always triggered at game start
                event = npe.EVENT.DLC_START,
                delay = 0,
                strict = true,
                pause_game = false,
            },
            end_actions = { -- this list of actions are executed upon closing the quest dialog.
                ACTION.CREATE_TASK_FIND_CODEC
            },
            end_sounds = { -- this list of sounds can plays upon closing the quest dialog.
                [1] = { sound = "npe\\mgs_codec\\voiceover\\snake\\whats_going_on",
                        duration = 1 },
            },
        },
        {
            id = "old_friend",
            title = "ui_mcm_npe_module_mgs_codec_old_friend_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_old_friend_card1_title",
                    message = "ui_mgs_codec_old_friend_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\snake_is_it_really_you",
                                duration = 5 },
                    },                                      
                },
                [2] = {
                    title = "ui_mgs_codec_old_friend_card2_title",
                    message = "ui_mgs_codec_old_friend_card2_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\this_cannot_be",
                                duration = 20 },
                    },              
                },
                [3] = {
                    title = "ui_mgs_codec_old_friend_card3_title",
                    message = "ui_mgs_codec_old_friend_card3_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\too_late",
                                duration = 21 },
                    },              
                },                                
            },
            context = {
                event = EVENT.OLD_FRIEND,
                delay = 2,
                strict = true,
                pause_game = false,
            },
            save_context = {
            },
        }, 
        {
            id = "we_need_a_plan",
            title = "ui_mcm_npe_module_mgs_codec_we_need_a_plan_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_we_need_a_plan_card1_title",
                    message = "ui_mgs_codec_we_need_a_plan_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\somehow",
                                duration = 17 },
                    },                                      
                },
                [2] = {
                    title = "ui_mgs_codec_we_need_a_plan_card2_title",
                    message = "ui_mgs_codec_we_need_a_plan_card2_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\the_only_way",
                                duration = 26 },
                    },              
                },    
                [3] = {
                    title = "ui_mgs_codec_we_need_a_plan_card3_title",
                    message = "ui_mgs_codec_we_need_a_plan_card3_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\go_to_their_hideout",
                                duration = 14 },
                    },              
                },                            
            },
            context = {
                event = EVENT.WE_NEED_A_PLAN,
                delay = 10,
                pause_game = false,
            },
            save_context = {
            },
            end_actions = {
                ACTION.CREATE_TASK_G0_TO_THE_CAR_PARK
            },
        },          
        {
            id = "look_for_help",
            title = "ui_mcm_npe_module_mgs_codec_look_for_help_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_look_for_help_card1_title",
                    message = "ui_mgs_codec_look_for_help_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\since_you_are_loners_base",
                                duration = 20 },
                    },                                      
                },              
            },
            context = {
                event = EVENT.LOOK_FOR_HELP,
                delay = 3,
                strict = true,
                pause_game = false,
            },
        },
        {
            id = "fanatic_boars",
            title = "ui_mcm_npe_module_mgs_codec_fanatic_boars_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_fanatic_boars_card1_title",
                    message = "ui_mgs_codec_fanatic_boars_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\really_killing_boars",
                                duration = 12 },
                    },                                      
                },              
            },
            context = {
                event = EVENT.FANATIC_BOARS,
                delay = 2,
                pause_game = false,
            },
        },          
        {
            id = "save_the_curier",
            title = "ui_mcm_npe_module_mgs_codec_save_the_curier_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_save_the_curier_card1_title",
                    message = "ui_mgs_codec_save_the_curier_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\a_courier",
                                duration = 17 },
                    },
                },
            },
            context = {
                event = EVENT.SAVE_THE_CURIER,
                delay = 2,
                pause_game = false,
            },
        },
        {
            id = "warn_military_base",
            title = "ui_mcm_npe_module_mgs_codec_warn_military_base_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_warn_military_base_card1_title",
                    message = "ui_mgs_codec_warn_military_base_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\warn_mil_base",
                                duration = 11 },
                    },                                      
                },              
            },
            context = {
                event = EVENT.WARN_TOWARDS_MILITARY,
                delay = 0,
                strict = true,
                pause_game = true,
            },
        }, 
        {
            id = "danger_military_base",
            title = "ui_mcm_npe_module_mgs_codec_danger_military_base_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_danger_military_base_card1_title",
                    message = "ui_mgs_codec_danger_military_base_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    sounds = {
                        [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\danger_mil_base",
                                duration = 5 },
                    },                                      
                },              
            },
            context = {
                event = EVENT.DANGER_NEAR_MILITARY,
                delay = 0,
                strict = true,
                pause_game = true,
            },
        },
        {
            id = "approach_carpark",
            title = "ui_mcm_npe_module_mgs_codec_approach_carpark_set_title",
            codec_frequency = 140.85,
            cards = {
                [1] = {
                    title = "ui_mgs_codec_approach_carpark_card1_title",
                    message = "ui_mgs_codec_approach_carpark_card1_message",
                    portrait_caller = "ui_npe_mgs_codec_otacon",
                    portrait_actor = "ui_npe_mgs_codec_snake",
                    -- sounds = {
                    --     [1] = { sound = "npe\\mgs_codec\\voiceover\\otacon_mgs1\\danger_mil_base",
                    --             duration = 5 },
                    -- },                                      
                },              
            },
            context = {
                event = EVENT.CARPARK_OUTLOOK,
                delay = 0,
                strict = true,
                pause_game = true,
            },
        },                          
    },
}


function on_mcm_load()
    -- [MANDATORY] The NPE module MCM menu meeds to be populated with the sets' ids defined above
	op =  { id= "mgs_codec", sh=true, text="ui_mcm_npe_module_mgs_codec", gr ={
				{id = "title",type= "slide",link= "ui_options_slider_player",text="ui_mcm_npe_module_mgs_codec_title",size= {512,50},spacing= 20 },
                -- [MANDATORY] The sets' ids defined above need to be added here. 
                --      This allow the user to check sets that have been shown (selected) and evenually replay them (unselect in mcm) if needed
                {id = "nanomachines", type = "check", val = 1, def=false},
                {id = "old_friend", type = "check", val = 1, def=false},
                {id = "we_need_a_plan", type = "check", val = 1, def=false},  
                {id = "look_for_help", type = "check", val = 1, def=false},      
                {id = "fanatic_boars", type = "check", val = 1, def=false},      
                {id = "save_the_curier", type = "check", val = 1, def=false},        
                {id = "warn_military_base", type = "check", val = 1, def=false},
                {id = "danger_military_base", type = "check", val = 1, def=false},
            }
		}

	return op, "npe_module"  -- [IMPORTANT] do not change this line
end

-- [MANDATORY] At game start add your deck with the NPE Manager
--      you need to replace "deck_npe_modulename" with the name of your deck

function on_game_start()
    if npe then
        npe_director.Register_npe_module(deck_npe_mgs_codec)
    end
end