
-------------------------------------------------- 0. Logging ----------------------------------------------------------

local Settings = {
    debug_logs = true,
    exec_logs = true,
    trace_logs = false,
}

local LOG = {
    -- NPE tag
    APP = { tag = "[NPE]"},
    -- log types
    INFO = { tag = ""},
    START = { tag = "-"},
    STOP = { tag = "!"},
    ERROR = { tag = "!"},
    WARN = { tag = "!"},
    ADD = { tag = "-"},
    REMOVE = { tag = "!"},
    RUN = { tag = "//"},
    -- categories
    CONF = { tag = "[CONF]", enabled = true},
    NPE_EXE = { tag = "[NPE_EXE]", enabled = true},
}

local function printlog(type,category,msg,...)
	msg = msg or " "
    if not category.enabled then return end
    if type then
        msg = type.tag .. LOG.APP.tag .. category.tag  .. msg
    else
        msg = LOG.APP.tag .. category.tag  .. msg
    end
	if select('#', ...) ~= 0 then printf(string.format(msg,...))
	else printf(msg)
	end
end

local function printdebug(type,category, msg,...) -- debug logging
	if Settings.debug_logs then printlog(type,category, msg,...) end
end

local function printtrace(type,category, msg,...) -- debug logging
	if Settings.trace_logs then printlog(type,category, msg,...) end
end

local function print_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printlog(LOG.INFO, LOG.CONF, indent .. '' .. key .. ':')
            print_table(value, indent .. '  ')
        else
            printlog(LOG.INFO, LOG.CONF, indent .. key .. ': ' .. tostring(value))
        end
    end
end

local function debug_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printdebug(LOG.INFO, LOG.CONF,indent .. '' .. key .. ':')
            debug_table(value, indent .. '  ')
        else
            printdebug(LOG.INFO, LOG.CONF,indent .. key .. ': ' .. tostring(value))
        end
    end
end

local function trace_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printtrace(LOG.INFO, LOG.CONF,indent .. '' .. key .. ':')
            trace_table(value, indent .. '  ')
        else
            printtrace(LOG.INFO, LOG.CONF,indent .. key .. ': ' .. tostring(value))
        end
    end
end

-- Execution Manager settings
local execution_manager_group_name = 'NPE_Execution_Manager' -- group name for the execution manager watch
local run_execution_manager_loop = false
-- Execution Watch settings
local execution_watch_name = 'NPE_Execution_Manager_Watch'
local run_execution_watch = false
local execution_watch_timer = 15
-- runners settings
local runners_default_group_name = 'NPE_Runners'

-- Execition types
TYPE = {
    INFINITE = "INFINITE",              -- never stops until disabled
    FINITE = "FINITE",                  -- stop after a number of loops
    CONDITIONAL = "CONDITIONAL",        -- stop when a condition is met
    QUEUE = "QUEUE",                    -- run a functor when the queue is not empty
    QUEUE_CONSUME = "QUEUE_CONSUME",    -- consume from a queue using a functor
    QUEUE_PRODUCE = "QUEUE_PRODUCE",    -- produce to a queue using a functor
    QUEUE_UPDATE = "QUEUE_UPDATE",      -- run a functor to a update all elements in the queue (not consuming)
    CALLBACK = "CALLBACK",              -- send a callback
    RUN = "RUN",                        -- run a functor
}   

-- runner internal states managed by the execution manager and run functions

RUNNER_STATE = {
    executing = "executing",
    running = "running",
    paused = "paused",
    paused_on_queue = "paused_on_queue",
    stop_condition_met = "stop_condition_met",
    pause_condition_met = "pause_condition_met",
    unscheduled = "unscheduled",
}

RUNNER_CONFIG_TEMPLATE = {
    DEFAULT = "default",
    INFINITE = "infinite",
    FINITE = "finite",
    CONDITIONAL = "conditional",
    QUEUE = "queue",
    QUEUE_CONSUME = "queue_consume",
    QUEUE_PRODUCE = "queue_produce",
    QUEUE_UPDATE = "queue_update",
}

-- runner configuration templates
local DEFAULT_RUNNER_CONFIG = {
    default = {
        name = nil,                                 -- name of the runner, unique in the runners' group
        group_name = nil,                           -- name of the runners' group, default is runners_default_group_name
        exclusive = false,                          -- exclusive execution rights over runners of the same group
        execution = TYPE.INFINITE,                  -- type of execution
        start_timer = 0,                            -- delay before starting the runner once enabled. paused runners will start immediately when resumed
        loop_timer = 1,                             -- delay between each loop
        loops = nil,                                -- number of loops before stopping the runner
        max_life = nil,                            -- maximum life time of the runner in seconds before the execution_watch stops it
        autoremove = false,                         -- execution_watch removes the runner when it reaches its max life time
        stop_condition = nil,                       -- a function to stop the runner conditionally
        pause_condition = nil,                       -- a function to pause the runner conditionally
        functor = nil,                              -- the function to execute
        -- functor and stop_condition interface 
        -- functor[1]: script name
        -- functor[2]: function name
        -- functor[3-n]: parameters        
        start = nil,                                -- functor to execute when the runner starts
        stop = nil,                                 -- functor to execute when the runner stops
    },    
    infinite = {
        execution = TYPE.INFINITE,
    },
    finite = {  
        execution = TYPE.FINITE,
    },
    conditional = {
        execution = TYPE.CONDITIONAL,
    },
    queue = {
        execution = TYPE.QUEUE,
    },    
    queue_consume = {
        execution = TYPE.QUEUE_CONSUME,
    },
    queue_produce = {
        execution = TYPE.QUEUE_PRODUCE,
    },
    queue_update = {
        execution = TYPE.QUEUE_UPDATE,
    },      
}

-- a template to create a new runner
local RUNNER_TEMPLATE = {
    default = {
        module = nil,                               -- [mandatory] set at creation, provided by clients in the GetRunnerConfig api -- TODO
        name = nil,                                 -- [mandatory] set at creation, using the runner configuration name, prefixed with the module name -- TODO
        group_name = nil,                           -- [optional] set at creation, using the runner configuration group_name or set to default, both prefixed with the module name -- TODO
        config = nil,                               -- set at creation in the Add api
        -- runner execution control related fields 
        enabled = false,                            -- manage execution
        exclusive = false,                          -- determine execution rights over runners of the same group
        running = false,                            -- running state (a timed event is active)   
        -- runner execution state related fields         
        executing = false,                          -- execution state (a timed event is executing the functor)        
        paused = false,                             -- runner is on paused state   
        unscheduled = false,                        -- runner execution group related fields         
        loop_count = 0,                             -- internal counter
        life = 0,                                   -- internal timer set on Add
        stop_condition_met = false,                 -- internal state, only used to break conditional runners loops
        pause_condition_met = false,                 -- internal state, only used to break conditional runners loops
    },  
}


-------------------------------------------------- 1. NPE Execution Manager Tables --------------------------------------------------

-- the runners list 
local Runner = {}

-- the execution group list
local Execution_group = {}

-------------------------------------------------- 2. Runners' private API ----------------------------------------------------------

-- runner helpers

local function is_execution_type_queue(execution)
    return execution == TYPE.QUEUE or execution == TYPE.QUEUE_CONSUME or execution == TYPE.QUEUE_PRODUCE or execution == TYPE.QUEUE_UPDATE
end

-- used to access the queue of runners of execution type queue
local function get_queue(runner_queue)
    return execute_func(unpack(runner_queue)) 
end

local function is_queue_empty(runner_queue)
    local queue = get_queue(runner_queue)
    return queue and #queue == 0
end

local function is_queue_not_empty(runner_queue)
    local queue = get_queue(runner_queue)
    return queue and #queue > 0
end

local function queue_size(runner_queue)
    local queue = get_queue(runner_queue)
    return queue and #queue
end

local function get_life(runner_name)
    return math.floor((time_global() - Runner[runner_name].life)/1000)
end

local function increase_loop_count(runner_name)
    Runner[runner_name].loop_count = Runner[runner_name].loop_count + 1
end

function generate_runner_name(module_name, runner_name)
    return module_name .. "_" .. runner_name
end

function generate_group_name(module_name, group_name)
    return module_name .. "_" .. group_name
end

-- creates runner instances

local function copy(obj, seen)
    if type(obj) ~= 'table' then return obj end
    if seen and seen[obj] then return seen[obj] end
    local s = seen or {}
    local res = setmetatable({}, getmetatable(obj))
    s[obj] = res
    for k, v in pairs(obj) do res[copy(k, s)] = copy(v, s) end
    return res
end
local function get_instance(runner_template)
    return copy(runner_template)
end

-- runner config validation functions

local function validate_config(runner_config)
    if not runner_config then
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner configuration is null") 
        return false 
    end
    if not runner_config.name then
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner name is null") 
        return false 
    end
    printdebug(LOG.RUN, LOG.NPE_EXE," Validate Runner Configuration: " .. runner_config.name)
    if not runner_config.module then
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner module is null") 
        return false 
    end    
    print_table(runner_config)
    if not runner_config.group_name then
        runner_config.group_name = runners_default_group_name -- TODO check this
        printdebug(LOG.ADD, LOG.NPE_EXE," Runner group name is null, set to " .. runner_config.group_name)
        -- runners in the runners_default_group_name cannot use exclusive execution
        runner_config.exclusive = false -- TODO check this
    end
    if is_execution_type_queue(runner_config.execution) then
        if not runner_config.queue then
            printdebug(LOG.ERROR, LOG.NPE_EXE," Runner: " .. runner_config.name .. " queue is null")
            return false 
        end
    end
    if runner_config.execution == TYPE.FINITE then
        if not runner_config.loops then
            runner_config.loops = 1 -- TODO check this
            printdebug(LOG.ADD, LOG.NPE_EXE," Runner loops is null, set to: 1" .. runner_config.loops)
        end
    end    
    if not runner_config.start_timer then
        runner_config.start_timer = 0 -- TODO check this
        printdebug(LOG.ADD, LOG.NPE_EXE," Runner start timer is null, set to 0")
    end
    if not runner_config.loop_timer then
        runner_config.loop_timer = runner_config.start_timer > 0 and runner_config.start_timer or 1
        printdebug(LOG.ADD, LOG.NPE_EXE," Runner loop timer is null, set to: " .. runner_config.loop_timer)
    end
    if not runner_config.execution then
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner execution type is null") 
        return false 
    end
    if not runner_config.functor then
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner functor is null") 
        return false 
    end
    printdebug(LOG.ADD, LOG.NPE_EXE," Runner configuration validated")
    return true
end

-- functor, queue and stop_condition validation

local function validate_functor(functor)
    printdebug(LOG.RUN, LOG.NPE_EXE," Validate Functor")
    if not functor then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Functor is null")
        return false 
    end
    -- checks is a table
    if type(functor) ~= "table" then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Functor is not a table")
        return false 
    end
    -- checks mandatory fields (script, function)
    if #functor < 2 then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Functor has less than 2 parameters")
        return false 
    end
    if type(functor[1]) ~= "string" then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Functor script name is not a string")
        return false 
    end
    if type(functor[2]) ~= "string" then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Functor function name is not a string")
        return false 
    end

    -- validated
    printdebug(LOG.ADD, LOG.NPE_EXE," Functor validated")
    return true
end

-- runner execution state management

local function stop_runner(runner_name)
    if not Runner[runner_name].enabled then return end -- runner is already disabled
    printdebug(LOG.STOP, LOG.NPE_EXE," Runner: " .. runner_name .. " disabled")
    Runner[runner_name].enabled = false
    if Runner[runner_name].exclusive then
        Execution_group[Runner[runner_name].group_name].exclusive_run = false
    end
end

local function unschedule_runner(runner_name)
    if Runner[runner_name].unscheduled then return end -- runner is already unscheduled
    printdebug(LOG.STOP, LOG.NPE_EXE," Runner: " .. runner_name .. " unscheduled")
    Runner[runner_name].enabled = false
    Runner[runner_name].unscheduled = true
    -- if is_execution_type_queue(Runner[runner_name].config.execution) then
    --     Runner[runner_name].paused_on_queue = true
    -- end
end

local function start_runner(runner_name)
    if Runner[runner_name].enabled then return end -- runner is already enabled
    printdebug(LOG.START, LOG.NPE_EXE," Runner: " .. runner_name .. " enabled")
    Runner[runner_name].enabled = true
    if Runner[runner_name].exclusive then
        Execution_group[Runner[runner_name].group_name].exclusive_run = true
    end
end

-- local function reschedule_runner(runner_name)
--     if not Runner[runner_name].unscheduled then return end -- runner is already scheduled
--     printdebug(LOG.START, LOG.NPE_EXE," Runner: " .. runner_name .. " rescheduled")
--     Runner[runner_name].enabled = true
-- end

local function pause_runner(runner_name)
    if Runner[runner_name].paused then return end  -- runner is already paused
    printdebug(LOG.STOP, LOG.NPE_EXE," Runner: " .. runner_name .. " paused")
    Runner[runner_name].enabled = false
    Runner[runner_name].paused = true
    if Runner[runner_name].exclusive then
        Execution_group[Runner[runner_name].group_name].exclusive_run = false
    end
end

local function pause_on_queue_runner(runner_name)
    if Runner[runner_name].paused_on_queue then return end  -- runner is already paused
    printdebug(LOG.STOP, LOG.NPE_EXE," Runner: " .. runner_name .. " paused on queue")
    Runner[runner_name].enabled = false
    Runner[runner_name].paused_on_queue = true
    if Runner[runner_name].exclusive then
        Execution_group[Runner[runner_name].group_name].exclusive_run = false
    end
end    

local function reset_state(runner_name)
    printdebug(LOG.INFO, LOG.NPE_EXE," Runner: " .. runner_name .. " state is reset")
    -- Runner[runner_name].loop_count = 0
    Runner[runner_name].stop_condition_met = false
    Runner[runner_name].pause_condition_met = false
    Runner[runner_name].paused_on_queue = false
    Runner[runner_name].paused = false
    Runner[runner_name].unscheduled = false
end

-- runner state management

local function set_runner_state(runner_name, runner_state, value)
    Runner[runner_name][runner_state] = value
end

-------------------------------------------------- 3. Runners' Execution private API ----------------------------------------------------------

-- functor handler

local function execute_start_functor(runner_name)
    local runner = Runner[runner_name]
    if runner.config.start then
        local success = execute_func(unpack(runner.config.start))
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner: " .. runner.name .. " start functor executed: " .. tostring(success))
    end
end

local function execute_stop_functor(runner_name)
    local runner = Runner[runner_name]
    if runner.config.stop then
        local success = execute_func(unpack(runner.config.stop))
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner: " .. runner.name .. " stop functor executed: " .. tostring(success))
    end
end

function get_disabled_reason(runner_name)
    local runner = Runner[runner_name]
    local reason
    if runner.paused then
        reason = "paused"
    elseif runner.paused_on_queue then
        reason = "paused on queue"
    elseif runner.unscheduled then
        reason = "unscheduled"
    else
        reason = "disabled"
    end
    return reason
end

local execute_functor = function(runner_name)
    -- the functor's handler or timed event
    -- these are perpetualy timed event which can only be stopped if runner is disabled
    -- usually the run function will stop the runner if certain conditions are met
    -- client scripts can stop the runner by calling the Pause/Remove functions
    -- print_table(params)
    local execution_success = false
    local runner = Runner[runner_name]
    -- check if the functor's runner has been removed, if so stop the execution
    if not runner then 
        printdebug(LOG.ERROR, LOG.NPE_EXE,"[execute_functor] Runner is null")
        return true 
    end
    printtrace(LOG.RUN, LOG.NPE_EXE," Functor Execution: " .. runner.name)

    if not Runner[runner_name].enabled then ---------------------- Stopping runner execution loop --------------------------------

        -- the runner is disabled, stop the execution state of timed event
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner: " .. runner.name .. " is " .. get_disabled_reason(runner_name) .. " at loop: " .. runner.loop_count)
        -- update the runner state
        set_runner_state(runner_name, RUNNER_STATE.running, false)
        set_runner_state(runner_name, RUNNER_STATE.executing, false)
        if not runner.config.paused or not runner.config.unscheduled or not runner.config.paused_on_queue then
            -- execute the stop functor
            execute_stop_functor(runner_name)
        end
        -- the runner execution loop is terminated
        return true 
    end
    
    ------------------------------------------------------- Starting runner execution loop --------------------------------
    set_runner_state(runner_name, RUNNER_STATE.executing, true)
    if runner.loop_count == 0 then ------------------------------- EXECUTE START --------------------------------
        -- execute the start functor
        execute_start_functor(runner_name)
    else --------------------------------------------------------- EXECUTE FUNCTOR --------------------------------

        -- check if a stop condition is found and if prevents the execution
        if runner.config.execution == TYPE.CONDITIONAL then
            if runner.config.stop_condition then 
            -- check the stop condition
                if execute_func(unpack(runner.config.stop_condition)) then
                    printdebug(LOG.INFO, LOG.NPE_EXE," Runner: " .. runner.name .. " stop condition met")
                    -- stop condition met, let signal it  to the run handler
                    set_runner_state(runner_name, RUNNER_STATE.stop_condition_met, true)
                    -- skip this loop but continue the timed event
                    return false
                end
            end-- stop condition not met
            if runner.config.pause_condition then
                -- check the pause condition
                if execute_func(unpack(runner.config.pause_condition)) then
                    printdebug(LOG.INFO, LOG.NPE_EXE," Runner: " .. runner.name .. " pause condition met")
                    -- pause condition met, let signal it  to the run handler                    
                    set_runner_state(runner_name, RUNNER_STATE.pause_condition_met, true)
                    -- skip this loop but continue the timed event
                    return false
                end
            end-- pause condition not met
        end
        
        -- execute the functor
        -- trace_table(runner.config.functor)
        execution_success = execute_func(unpack(runner.config.functor))
    end

    -- update the loop count
    increase_loop_count(runner_name)
    printtrace(LOG.INFO, LOG.NPE_EXE," Executed Runner: " .. runner.name .. " Loop: " .. runner.loop_count)

    -- reset this timed event timer for the next execution loop
    ResetTimeEvent(runner.group_name, runner.name, runner.config.loop_timer)

    -- keeps running as long as the runner is enabled
    return false
end

-- runner handler

-- TODO call this manage_run
-- it manage the run state of the runners
-- it can:
--      - start a runner if it is not running
--      - reschedule a runner if it is unscheduled
--      - stop a runner if it is running and the stop condition is met
--      - pause a runner if it is running and the queue is empty

-- called on every actor update when runner is enabled
local function run(runner_name)

    local runner = Runner[runner_name]
    if not runner.running then ------------------------------- START RUNNER --------------------------------
        -- instantiate if not running
        local create_timer = runner.config.start_timer
        if runner.paused or runner.paused_on_queue or runner.unscheduled then -- the runner was enabled while paused 
            create_timer = runner.config.loop_timer -- start immediately from the paused/unscheduled state
        else -- the runner is freshly enabled
            -- reset the loop count
            Runner[runner_name].loop_count = 0
        end
        reset_state(runner_name)
        set_runner_state(runner_name, RUNNER_STATE.running, true)
        CreateTimeEvent(runner.group_name, runner.name, create_timer, execute_functor, runner_name)
        printlog (LOG.INFO, LOG.NPE_EXE," Runner: " .. runner.name .. " started with timer " .. create_timer)
    else ----------------------------------------------------- STOP RUNNER --------------------------------
        -- otherwise try to stop the runner

        -- handle the runner execution type
        if Execution_group[runner.group_name].exclusive_run and not runner.exclusive then -- check if another exclusive runner is running. if so, unschedule the runner
            unschedule_runner(runner_name)
        elseif runner.config.execution == TYPE.INFINITE then
            -- do nothing, the runner is infinite
        elseif runner.config.execution == TYPE.FINITE then
            local max_loops 
            if runner.config.start then
                max_loops = runner.config.loops + 1
            else
                max_loops = runner.config.loops
            end
            -- check the loop count
            if runner.loop_count >= max_loops then
                printdebug(LOG.STOP, LOG.NPE_EXE," Runner: " .. runner_name .. " reached max loops")
                -- terminate the runner
                stop_runner(runner_name)
            end
        elseif runner.config.execution == TYPE.CONDITIONAL then
            -- check any termination condition is met
            if runner.stop_condition_met then
                -- stop the runner
                stop_runner(runner_name)
            end
            if runner.pause_condition_met then
                -- pause the runner
                pause_runner(runner_name)
            end
        elseif is_execution_type_queue(runner.config.execution) then
            -- execution_type_queue runners are paused when the queue is empty
            if is_queue_empty(runner.config.queue) then
                -- pause the runner on queue state
                pause_on_queue_runner(runner_name)
            end
        else
            printdebug(LOG.ERROR, LOG.NPE_EXE," Runner: " .. runner_name .. " execution type " .. runner.config.execution .. " not supported")
        end
    end
end

-------------------------------------------------- 4. Execution Manager ----------------------------------------------------------
-- TODO call this execution_scheduler
-- it should only start/reshedule/run the runners

-- called on every actor update when the callback is registered - @Manager_start()
local function execution_manager()
    -- for each Runner
    for runner_name, runner in pairs(Runner) do
        
        if runner.enabled then
            run(runner_name)
        elseif runner.paused_on_queue then
            -- try to re-enable runnners that have been paused on queue

            -- check if the queue is not empty
            local size = queue_size(runner.config.queue)
            if size > 0 then
                printtrace(LOG.INFO, LOG.NPE_EXE," Queue for runner: " .. runner_name .. " size " .. size)
                -- reshedule the runner if execution group allows it
                if runner.unscheduled and Execution_group[runner.group_name].exclusive_run then
                    printtrace(LOG.ERROR, LOG.NPE_EXE," Runner: " .. runner_name .. " is unscheduled and won't start because of exclusive execution rights")
                    -- do nothing
                else
                    -- start the runner
                    start_runner(runner_name)
                end
            end
        elseif runner.unscheduled and not Execution_group[runner.group_name].exclusive_run then
            start_runner(runner_name)
        end
    end
end

-------------------------------------------------- 5. Execution Manager Watch ----------------------------------------------------------

local function execution_watch()
    printdebug(LOG.RUN, LOG.NPE_EXE," Execution Manager watch loop")
    if not run_execution_manager_loop then return true end -- stop the watch
    -- reset the timer
    ResetTimeEvent(execution_manager_group_name, execution_watch_name, execution_watch_timer)

    -- watch execution manager
    if run_execution_manager_loop then
        printlog(LOG.START, LOG.NPE_EXE," Execution Manager running")
    end
    -- watch runners
    for runner_name, runner in pairs(Runner) do
        local log_type = LOG.START
        if not runner.enabled or not runner.running or runner.paused or runner.unscheduled then
            log_type = LOG.ERROR
        end        
        printdebug(log_type, LOG.NPE_EXE," Runner: [" .. runner_name .. "] in group [" .. runner.group_name .. "], exclusive[" .. tostring(runner.exclusive) .. "]") 
        printdebug(LOG.INFO, LOG.NPE_EXE,"  status:         enabled[" .. tostring(runner.enabled) .. "], paused[" .. tostring(runner.paused) .. "], paused_on_queue[" .. tostring(runner.paused_on_queue) .. "], unscheduled[" .. tostring(runner.unscheduled) .. "]")
        printdebug(LOG.INFO, LOG.NPE_EXE,"  execution:      running[" .. tostring(runner.running) .. "], executing[" .. tostring(runner.executing) .. "]")
        printdebug(LOG.INFO, LOG.NPE_EXE,"  state:          loop_count[" .. runner.loop_count .. "], life[" .. get_life(runner_name) .. "] seconds, max_life[" .. tostring(runner.config.max_life) .. "]")
        if runner.config.max_life and get_life(runner_name) > runner.config.max_life then
            printdebug(LOG.STOP, LOG.NPE_EXE," Runner: " .. runner.name .. " reached max life")
            stop_runner(runner_name)
            if runner.config.autoremove then
                Remove(runner_name)
            end
        end
    end
    -- keep watching
    return false
end

-- refactor to use a runner instead

local function watch()
    if run_execution_watch then return end
    run_execution_watch = true
    CreateTimeEvent(execution_manager_group_name, execution_watch_name, execution_watch_timer, execution_watch)
end

local function unwatch()
    if not run_execution_watch then return end
    run_execution_watch = false
    RemoveTimeEvent(execution_manager_group_name, execution_watch_name)
end

-------------------------------------------------- 6. Execution Manager Public API ----------------------------------------------------------

function Manager_start()
    RegisterScriptCallback("actor_on_update", execution_manager)

    printlog(LOG.START, LOG.NPE_EXE," Execution Manager started")
    if run_execution_manager_loop then return end
    run_execution_manager_loop = true
    watch()
    SendScriptCallback("npe_execution_manager_started")
end

function Manager_stop()
    UnregisterScriptCallback("actor_on_update", execution_manager)
    printlog(LOG.STOP, LOG.NPE_EXE," Execution Manager stopped")
    if not run_execution_manager_loop then return end
    run_execution_manager_loop = false
    for runner_name, runner in pairs(Runner) do
        Remove(runner_name)
    end
    unwatch()
    SendScriptCallback("npe_execution_manager_stopped")
end

function Is_running()
    return run_execution_manager_loop
end

-------------------------------------------------- 7. Runner Registration Public API ----------------------------------------------------------

-- add runner config get instance from template name and module_name (client script)
function GetRunnerConfig(template_name, module_name, runner_name)
    if not DEFAULT_RUNNER_CONFIG[template_name] then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner template: " .. template_name .. " does not exist")
        return 
    end
    local runner_config = copy(DEFAULT_RUNNER_CONFIG[template_name])
    runner_config.name = runner_name
    runner_config.module = module_name -- TODO add module as prefix to all callbacks names and timed event names
    return runner_config
end

function Add(runner_config) -- TODO add must pass module_name
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    printdebug(LOG.RUN, LOG.NPE_EXE," Add Runner")
    if not validate_config(runner_config) then return end

    -- add the new runner to the list Runner
    if not Runner[runner_config.name] then
        -- create a new runner instance -- TODO Remove instancing, so the Runner Config can be changed in real time from the client script
        local new_runner_instance = get_instance(RUNNER_TEMPLATE.default)
        new_runner_instance.name = runner_config.name
        new_runner_instance.module = runner_config.module  -- TODO remove module from runner config
        new_runner_instance.group_name = runner_config.group_name
        new_runner_instance.exclusive = runner_config.exclusive 
        new_runner_instance.config = runner_config

        -- functor is mandatory, must validate the functor's parameters
        if not validate_functor(new_runner_instance.config.functor) then
            printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config's field \"functor\" is not a functor")
            printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config is rejected")
            return false
        end
        
        -- stop_condition is optional
        if new_runner_instance.config.stop_condition then
            if not validate_functor(new_runner_instance.config.stop_condition) then
                printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config's field \"stop_condition\" is not a functor")
                printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config is rejected")
                return false
            end
        end
        -- pause_condition is optional
        if new_runner_instance.config.pause_condition then
            if not validate_functor(new_runner_instance.config.pause_condition) then
                printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config's field \"pause_condition\" is not a functor")
                printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config is rejected")
                return false
            end
        end

        -- stop_condition is optional
        if is_execution_type_queue(new_runner_instance.config.execution) then
            if not validate_functor(new_runner_instance.config.queue) then
                printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config's field \"queue\" is not a functor")
                printdebug(LOG.ERROR, LOG.NPE_EXE," Runner config is rejected")
                return false
            end
        end

        -- passed validation
        new_runner_instance.config.validated = true

        -- add the new runner to the execution group list
        if not Execution_group[new_runner_instance.group_name] then
            local members = {}
            table.insert(members, new_runner_instance.name)
            Execution_group[new_runner_instance.group_name] = { exclusive_run = false, members = members}
        else
            table.insert(Execution_group[new_runner_instance.group_name].members, new_runner_instance.name)
        end        

        -- add the new runner to Runner list using runner_name as key
        Runner[new_runner_instance.name] = new_runner_instance
        -- set the life time
        Runner[new_runner_instance.name].life = time_global()
        printdebug(LOG.ADD, LOG.NPE_EXE," Runner: " .. new_runner_instance.name .. " added")
    else
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner: " .. runner_config.name .. " already exists")
    end
end

function Remove(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    -- I need to remove a runner from the list Runner
    if not runner_name then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Runner name is null")
        return 
    end
    local runner = Runner[runner_name]
    if runner then 
        RemoveTimeEvent(runner.group_name, runner.name)
        Runner[runner_name] = nil
        printdebug(LOG.REMOVE, LOG.NPE_EXE," Runner: " .. runner_name .. " removed")
    else
        printdebug(LOG.ERROR, LOG.NPE_EXE," Removing Runner: " .. runner_name .. " does not exist")
    end
end

function RemoveAll(module_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    for runner_name, runner in pairs(Runner) do
        if runner.module == module_name then
            Remove(runner_name)
        end
    end
end

-------------------------------------------------- 8. Runner Execution Public API ----------------------------------------------------------

function Stop(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    if not runner_name then return end
    if Runner[runner_name] then
        reset_state(runner_name)
        stop_runner(runner_name)
    end
end

function Pause(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    if not runner_name then return end
    if Runner[runner_name] then
        pause_runner(runner_name)
    end
end

function Resume(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    if not runner_name then return end
    if Runner[runner_name] then
        start_runner(runner_name)
    end
end

-------------------------------------------------- 9. Runner State Public API ----------------------------------------------------------

function GetRunnerCount(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    if Runner[runner_name] and Runner[runner_name].enabled then
        return Runner[runner_name].loop_count
    else
        return -1
    end
end

function IsRunnerRunning(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    if Runner[runner_name] then
        return Runner[runner_name].running
    else
        return false
    end
end

function IsRunnerEnabled(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    if Runner[runner_name] then
        return Runner[runner_name].enabled
    else
        return false
    end
end

function IsRunnerPaused(runner_name)
    if not Is_running() then 
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        return 
    end
    if Runner[runner_name] then
        return Runner[runner_name].paused
    else
        return false
    end
end

-------------------------------------------------- 10. Game Callbacks ----------------------------------------------------------
if AddScriptCallback then
    AddScriptCallback("npe_execution_manager_started")
    AddScriptCallback("npe_execution_manager_stopped")
end

local function actor_on_first_update()
    -- start the execution manager
    Manager_start()
end

local function actor_on_net_destroy()
    printlog(LOG.RUN, LOG.NPE_EXE," Actor Net Destroy")
    Manager_stop()
end

local function npe_on_log_update()
    printf("NPE EVENT LOG UPDATE")
    -- LOG = npe_manager.LOG
end

function on_game_start()

    --- Execution Manager callbacks registration
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    RegisterScriptCallback("npe_on_log_update", npe_on_log_update)
    RegisterScriptCallback("actor_on_net_destroy", actor_on_net_destroy)
end