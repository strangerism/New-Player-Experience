
local npeConfig = {
    decks = {},
}

local npeSetsQueue = {
    contexts = {},
}

local playableQueue = {
    setsKeys = {},
}

CONTEXT_TYPE = {
    NONE = "NONE",
    EVENT = "EVENT",
    CUSTOM = "CUSTOM",
    FUNCTOR = "FUNCTOR",
}

FUNCTORS = {
    ITEM_LOOTED = "Item Looted", 
    ITEM_OWNED = "Item Owned",
    TALKED_TO_NPC = "Talked to NPC",
    DAMAGE_RECEIVED = "Damage Received",
    
}

Settings = {
    debug_logs = true,
    enable = true,
    contextmatch_frequency = 3,
    play_frequency = 10
}


function printlog(msg,...)
	msg = msg or " "
	
	if select('#', ...) ~= 0 then printf(string.format(msg,...))
	else printf(msg)
	end
end

function printdebug(msg,...) -- debug logging
	if debug_logs then printlog(msg,...) end
end


local function map_to_set_key(moduleId, setId)
    return moduleId .. "/" .. setId
end

local function map_from_set_key(key)
    local split = string.gmatch(key, "[^/]+")
    local moduleId = split()
    local setId = split()
    return moduleId, setId
end


local function add_to_sets_queue(set, moduleId)
    local setKey = map_to_set_key(moduleId, set.id)
    if set ~= nil then
        local context = {
            type = set.context.type,
            qualifier = set.context.qualifier,
            functor = set.context.functor,
        }
        -- Check if a context with the same contextId already exists
        if npeSetsQueue.contexts[setKey] == nil then
            -- Add the new context to the table with contextId as the key
            npeSetsQueue.contexts[setKey] = context
        else
            printlog("context with id " .. setKey .. " already exists.")
        end
    end
end

local function get_set_from_key(key)
    local moduleId, setId = map_from_set_key(key)
    local set = nil
    for i, deck in ipairs(npeConfig.decks) do
        if deck.module == moduleId then
            for j, setEntry in ipairs(deck.sets) do
                if setEntry.id == setId then
                    set = setEntry
                    break
                end
            end
        end
    end
    return set
end

local function add_to_playable_queue(setsKeys)
    if setsKeys == nil then
        return
    end

    for i, setKey in ipairs(setsKeys) do
        -- add set to the playable queue
        table.insert(playableQueue.setsKeys, setKey)
        -- removes it from the npeSetsQueue
        npeSetsQueue.contexts[setKey] = nil
    end
end

function Add_deck(npeDeck)
    if npeDeck ~= nil then
        local deckExists = false
        for i, deck in ipairs(npeConfig.decks) do
            if deck.id == npeDeck.id then
                deckExists = true
                break
            end
        end
        if not deckExists then
            table.insert(npeConfig.decks, npeDeck)
        else
            printlog("Deck with id " .. npeDeck.id .. " already exists.")
        end
    end
end

local function update_decks_from_mcm()
    
    for i, deck in ipairs(npeConfig.decks) do
        for j, set in ipairs(deck.sets) do
            set.played = npe_mcm.npe_module_get_setting(deck.module, set.id)
        end
    end
end



local function update_queue()

    npeSetsQueue = {
        contexts = {},
    }
    for i, deck in ipairs(npeConfig.decks) do
        for j, set in ipairs(deck.sets) do
            -- Only call add_to_sets_queue if set.played is false
            if set.played == false then
                add_to_sets_queue(set, deck.module)
            end
        end
    end
end
    

local function print_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printlog(indent .. '' .. key .. ':')
            print_table(value, indent .. '  ')
        else
            printlog(indent .. key .. ': ' .. tostring(value))
        end
    end
end

local function find_sets_on(qualifier)
    local setsKeys = {}
    for setKey, context in pairs(npeSetsQueue.contexts) do
        if context.qualifier == qualifier then
            table.insert(setsKeys, setKey)
        end
    end
    return setsKeys
end

local function find_contexts_on_functor()
    printdebug("find_contexts_on_functor")
    local setsKeys = {}
    for setKey, context in pairs(npeSetsQueue.contexts) do
        printdebug("Checking set %s", setKey)
        if context.type == CONTEXT_TYPE.FUNCTOR and context.functor then
            printdebug(table.concat(context.functor, ', '))
            local success = execute_func(unpack(context.functor))
            printdebug("Functor %s executed. Success: %s", setKey, success)
            if success then
                table.insert(setsKeys, setKey)
            end
        end
    end
    return setsKeys
end

local function find_active_contexts()
    -- search from the Event type contexts and check if they have become active
    -- if active they are added to the playableQueue
    local setsKeys = {}
    for setKey, context in pairs(npeSetsQueue.contexts) do
        if context.type == CONTEXT_TYPE.EVENT and context.qualifier then
            local active = npe_events.Invoke[context.qualifier]()
            if active then
                table.insert(setsKeys, setKey)
            end
        end
    end
    return setsKeys
end

local function play_random_set(self)
    printdebug("play_random_set")
    if playableQueue.setsKeys and #playableQueue.setsKeys > 0 then
        local randomIndex = math.random(#playableQueue)
        local key = table.remove(playableQueue.setsKeys, randomIndex)
        local set = get_set_from_key(key)
        if set ~= nil then
            local moduleId, unused = map_from_set_key(key)
            set.module = moduleId
            if not npe_dialog.GUI then
                -- Call the function that will play the set
                printdebug("Playing set %s from module %s", set.id, set.module)
                printdebug("Set Title: %s", set.title)
                set.played = true
                npe_mcm.npe_module_set_setting(moduleId, set.id, true)
                if self then
                    self:On_Cancel()
                end
                printlog("[NPE] starting dialog")
                npe_dialog.Play(set)
                Pause_play_loop()
            else
                -- cannot play set, UI is busy. Put it back in the queue
                table.insert(playableQueue.setsKeys, key)
            end
        end
    end
end

local runEligibilityMatchLoop = false
local playEligibilityMatchName = 'NPE_EligibilityMatch_Loop'

local function npe_contexts_query_loop()
    printdebug("[NPE] EligibilityMatch loop")
    if not runEligibilityMatchLoop then return true end
    ResetTimeEvent(playEligibilityMatchName, playEligibilityMatchName, Settings.contextmatch_frequency)

    -- find matching sets with ContextType.FUNCTOR and check eligibility
    local setsKeys = find_contexts_on_functor()
    printdebug("//find_contexts_on_functor:")
    print_table(setsKeys)
    add_to_playable_queue(setsKeys)


    -- find matching sets with ContextType.EVENT and check eligibility
    setsKeys = find_active_contexts()
    printdebug("//find_active_contexts:")
    print_table(setsKeys)
    add_to_playable_queue(setsKeys)

    printdebug("- PlayableQueue:")
    print_table(playableQueue.setsKeys)

    return false
end
local function pause_active_contexts_query_loop()
    printlog("[NPE] pausing EligibilityMatch loop")
    runEligibilityMatchLoop = false
end

local function resume_active_contexts_query_loop()
    printlog("[NPE] resuming EligibilityMatch loop")
    runEligibilityMatchLoop = true
    CreateTimeEvent(playEligibilityMatchName, playEligibilityMatchName, 10, npe_contexts_query_loop) -- offset time 10 seconds
end


local runPlayLoop = false
local playLoopName = 'NPE_Play_Loop'

local function npe_play_loop()
    if not runPlayLoop then return true end
    ResetTimeEvent(playLoopName, playLoopName, Settings.play_frequency)

    play_random_set()

    return false
end
function Pause_play_loop()
    printlog("[NPE] pausing play loop")
    runPlayLoop = false
end

function Resume_play_loop()
    printlog("[NPE] resuming play loop")
    runPlayLoop = true
    CreateTimeEvent(playLoopName, playLoopName, 10, npe_play_loop) -- offset time 10 seconds
end

local function general_initialization()

    -- npe Settings
    Settings.debug_logs = npe_mcm.npe_get_setting("general", "debug_logs")
    Settings.enable = npe_mcm.npe_get_setting("general", "enable")
    Settings.contextmatch_frequency = npe_mcm.npe_get_setting("general", "contextmatch_frequency")
    Settings.play_frequency = npe_mcm.npe_get_setting("general", "play_frequency")  
   -- update the npeConfig table with the Settings from the MCM
   update_decks_from_mcm()

   -- Use the function to print the npeConfig.decks table
   printlog("- Decks:")
   print_table(npeConfig.decks)

   -- update the queue with the contexts from the npeConfig table
   update_queue()

   -- Use the function to print the npeSetsQueue table
   printlog("- Queue:")
   print_table(npeSetsQueue.contexts)

end

local function npe_actor_on_first_update()
    printlog(" npe_actor_on_first_update")

    general_initialization()

    printlog("[NPE] starting play loop")
    Resume_play_loop()
    printlog("[NPE] starting active contexts query loop")
    resume_active_contexts_query_loop()
end

local function on_option_change()
    update_decks_from_mcm()
    update_queue()
    -- Use the function to print the npeSetsQueue table
    printlog("- Queue:")
    print_table(npeSetsQueue.contexts)
end

function on_game_start()
    RegisterScriptCallback("on_option_change", on_option_change)
    RegisterScriptCallback("actor_on_first_update", npe_actor_on_first_update)

end