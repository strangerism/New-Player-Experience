local printlog = npe_logging.Printlog_npe
local printdebug = npe_logging.Printdebug_npe
local printtrace = npe_logging.Printtrace_npe
local print_table = npe_logging.Print_table_npe
local debug_table = npe_logging.Debug_table_npe
local print_functor = npe_logging.Print_functor_npe
local LOG = npe_logging


-------------------------------------------------------------- Codec to Radio RF-Receiver integration functions --------------------------------------------------------------

-- monkey patching radio stuff from item_radio.script

RADIO_TYPE = {
    VANILLA = "VANILLA",
    NERFS = "NERFS",
    DAR = "DAR"
}

local NERFS_RADIO = "<NERFS> "
local NERFS_VANILLA = "1.6-b2"
local NERFS_DAR = "1.5-DAR"

-- saving radio sounds for restoration

local no_sound = sound_object("radio\\no_sound")
local snd_emission = {}
local snd_emission_restore = nil
local snd_random = {}
local snd_random_restore = nil
local snd_talk = {}
local snd_talk_restore = nil

local snd_on_restore = nil
local snd_off_restore = nil
local snd_noise_restore = nil
local snd_white_noise_restore = nil


-- save all radio sounds for restoration when needed (e.g. when any codec dialog is used)

local function configure_radio_sounds_for_restoration()
    if Get_radio_type() == RADIO_TYPE.VANILLA then
        -- creating silent sounds library
        snd_emission_restore = item_radio.snd_emission
        for i=1,8 do snd_emission[i] = no_sound end
        snd_random_restore = item_radio.snd_random
        for i=1,13 do snd_random[i] = no_sound end
        snd_talk_restore = item_radio.snd_talk
        for i=1,33 do snd_talk[i] = no_sound end
    
        snd_on_restore = item_radio.snd_on
        snd_off_restore = item_radio.snd_off
        snd_noise_restore = item_radio.snd_noise
        snd_white_noise_restore = item_radio.snd_noise
        snd_emission_restore = item_radio.snd_emission
        snd_random_restore = item_radio.snd_random
        snd_talk_restore = item_radio.snd_talk    
    else
        -- creating silent sounds library
        snd_noise_restore = item_radio.get_signal_sound("noise")
        snd_white_noise_restore = item_radio.get_signal_sound("white_noise")
        
    end
end


-- silence the radio noise and white noise sounds for the NERFS/DAR mods 

local function silence_nerf_radio(silence)
    item_radio.disable_all_sounds = silence
    if silence then
        item_radio.set_signal_sound("noise", "$no_sound")
        item_radio.set_signal_sound("white_noise", "$no_sound")
    else
        item_radio.set_signal_sound("noise", snd_noise_restore)
        item_radio.set_signal_sound("white_noise", snd_white_noise_restore)
    end
end

local function silence_vanilla_radio(silence)
    if silence then
        item_radio.snd_noise = no_sound
        item_radio.snd_white_noise = no_sound
        item_radio.snd_on = no_sound
        item_radio.snd_off = no_sound
        item_radio.snd_emission = snd_emission     
        item_radio.snd_random = snd_random
        item_radio.snd_talk = snd_talk  
    else
        item_radio.snd_noise = snd_noise_restore
        item_radio.snd_white_noise = snd_white_noise_restore
        item_radio.snd_on = snd_on_restore
        item_radio.snd_off = snd_off_restore
        item_radio.snd_emission = snd_emission_restore     
        item_radio.snd_random = snd_random_restore
        item_radio.snd_talk = snd_talk_restore                                         
    end
end

-------------------------------------------------------- functions lifted from Haru's Detector Selector mod script detector_selector_mcm ------------------------------------------------------------
-- credits to Haru for the original code

local Devices = {
    anomaly = {
        devices = {
			["detector_grizzly_up"] = 10,
            ["detector_scientific_up"] = 9,
            ["detector_elite_up"] = 8,
            ["detector_advanced_up"] = 7,
            ["detector_simple_up"] = 6,
			["detector_grizzly"] = 5,
            ["detector_scientific"] = 4,
            ["detector_elite"] = 3,
            ["detector_advanced"] = 2,
            ["detector_simple"] = 1
        }
    },
    radio = {
        devices = {
            ["detector_radio"] = 1,
        },
    },
    mgs_codec = {
        devices = {
            ["mgs_codec"] = 1
        },
    },    
    geiger = {
        devices = {
            ["detector_geiger"] = 1
        },
    },
    lights = {
        devices = {
            ["device_flashlight"] = 1
        },
    },
    detector_anomaly = {
        devices = {
            ["detector_anomaly"] = 1
        },
    }
}


local callback_name_on_equip = nil
local function timed_callback_notification()
    if callback_name_on_equip then
        SendScriptCallback(callback_name_on_equip)
    end

    return true
end
local function show_event()
    db.actor:show_detector(true)
    CreateTimeEvent("npe_timed_callback_notification", "npe_timed_callback_notification", 0.3, timed_callback_notification)
    return true
end

local function hide_event(obj)
    db.actor:force_hide_detector()
    obj:switch_state(3)
    return true
end

local function hide_detector(obj)
    obj:switch_state(2)
    local det_hide_time = (obj:play_hud_motion("anm_hide_fast", true, 3, 2, 0) / 1000) + 0.25
    CreateTimeEvent("npe_hide_detector", "npe_hide_detector", det_hide_time, hide_event, obj)
end

local function cycle_detector(prev, next)
    prev:switch_state(2)
    local det_hide_time = (prev:play_hud_motion("anm_hide_fast", true, 3, 2, 0) / 1000) + 0.25
    CreateTimeEvent("npe_hide_detector", "npe_hide_detector", det_hide_time, function(prev, next)
        hide_event(prev)
        db.actor:move_to_slot(next, 9)
        CreateTimeEvent("npe_show_detector","npe_show_detector", 0.1, show_event)
        return true
    end, prev, next)
end

local function select_detector(category)

    local devices = category.devices
    local actor = db.actor
    local device_in_slot = actor:item_in_slot(9)
    local active_device = actor:active_detector()
    if device_in_slot and devices[device_in_slot:section()] then
        CreateTimeEvent("npe_show_detector","npe_show_detector", 0.1, show_event)
        return
    end
    local devices_ruck = {}
    actor:iterate_inventory(function(owner, obj)
        local sec = obj and obj:section()
        if sec and devices[sec] then
            devices_ruck[#devices_ruck + 1] = {
                ["object"] = obj, 
                ["weight"] = devices[sec] + obj:condition()
            }
        end
    end, actor)
    if is_empty(devices_ruck) then
        return
    end
    table.sort(devices_ruck, function(a,b) return a.weight > b.weight end)
    if active_device then
        cycle_detector(active_device, devices_ruck[1].object)
        return
    end
    actor:move_to_slot(devices_ruck[1].object, 9)
    CreateTimeEvent("npe_show_detector","npe_show_detector", 0.1, show_event)
end

-- end of Haru's Detector Selector mod script detector_selector_mcm

---------------------------------------------------------------------------------- RADIO API functions ----------------------------------------------------------------------------------

-- API  to figure out which radio mod is installed

function Get_radio_type()
    if item_radio.logprefix and item_radio.logprefix == NERFS_RADIO then
        if item_radio.script_version == NERFS_VANILLA then
            return RADIO_TYPE.NERFS
        elseif dar_rf_noise then -- this is a check for DAR mod, it's the name of a script from DAR mod
            return RADIO_TYPE.DAR
        else -- this is a fallback for any other NERFS version
            return RADIO_TYPE.NERFS
        end
    else
        return RADIO_TYPE.VANILLA
    end
end

-- API used by codec dialog to start the equip radio process
-- the api is generic but it should be used only for the codec device
-- any radio present in the inventory will be used and equipped as codec

function Equip_radio()
    select_detector(Devices.mgs_codec)
end

-- simple API to unequip the codec

function Unequip_radio()
    printdebug(LOG.INFO, LOG.ACTION," Unequip_radio()")
    local actor = db.actor
    local device_in_slot = actor:item_in_slot(9)
    if device_in_slot then
        hide_detector(device_in_slot)
    end
end

-- API used by codec dialog to mute the radio

function Mute_radio(silence)
    printdebug(LOG.INFO, LOG.ACTION," Mute radio " .. Get_radio_type() .. " ("..tostring(silence)..")")
    if Get_radio_type() == RADIO_TYPE.VANILLA then
        silence_vanilla_radio(silence)
    else
        silence_nerf_radio(silence)        
    end
    -- returns true to prevent further execution of the function (e.g. from timed events)
    return true
end

-- API used by codec dialog to set the radio frequency that is displayed on the radio 3d model

function Set_radio_freq(new_frequency)
    printdebug(LOG.INFO, LOG.ACTION," Set_radio_freq("..new_frequency..")")

	local oldf = math.floor(item_radio.get_freq())
    printdebug(LOG.INFO, LOG.ACTION," oldf = "..oldf)
    local change = 0
    change = new_frequency - oldf
    printdebug(LOG.INFO, LOG.ACTION," change = ".. change)
	item_radio.change_freq(change)
end

--- APIs to change/set radio sounds through callbacks or directly

function Set_callback_on_radio_equip(callback_name)
    callback_name_on_equip = callback_name
end


function Set_radio_open_sound(sound)
    if sound then
        if Get_radio_type() == RADIO_TYPE.VANILLA then
            item_radio.snd_on = sound_object(sound)
        end
    end
end

function Set_radio_close_sound(sound)
    if sound then
        if Get_radio_type() == RADIO_TYPE.VANILLA then
            item_radio.snd_off = sound_object(sound)
        end
    end
end

--------------------------------------------------------------------------------- GAME standard Callbacks ------------------------------------------


function on_game_start()
    configure_radio_sounds_for_restoration()
end