--- *********************************** npe_execution CLIENT EXAMPLE SCRIPT *********************************** ---
local printlog = npe_manager.Printlog_npe
local printdebug = npe_manager.Printdebug_npe
local print_table = npe_manager.Print_table_npe
LOG = npe_manager.LOG

-- this part belongs to a client script

local my_items_queue = {
    items = {},
}

-- a functor used to consume items from the queue and print them
-- operates in the client namespace context
function print_items(runner_name, action)
    printdebug(LOG.RUN, LOG.NPE_EXE," Functor print_items")
    printdebug(LOG.INFO, LOG.NPE_EXE," Action: " .. action)

    if my_items_queue.items and #my_items_queue.items > 0 then
        -- I need to remove the first item from the queue, and print it
        local item = table.remove(my_items_queue.items, 1)
        printdebug(LOG.INFO, LOG.NPE_EXE," Queue: " .. #my_items_queue.items)
        printdebug(LOG.INFO, LOG.NPE_EXE," Item: " .. item)
    else 
        printdebug(LOG.INFO, LOG.NPE_EXE," Items Queue is empty")
        npe_execution.Stop(runner_name)
        SendScriptCallback("client_queue_empty")
    end
    return true
end

local my_cards_queue = {
    cards = {},
}

-- a functor used to consume cards from the queue and print them
function print_cards(runner_name, action)
    printdebug(LOG.RUN, LOG.NPE_EXE," Functor print_cards")
    -- print_table(params)
    printdebug(LOG.INFO, LOG.NPE_EXE," Action: " .. action)

    if my_cards_queue.cards and #my_cards_queue.cards > 0 then
        -- I need to remove the first item from the queue, and print it
        local item = table.remove(my_cards_queue.cards, 1)
        printdebug(LOG.INFO, LOG.NPE_EXE," Queue: " .. #my_cards_queue.cards)
        printdebug(LOG.INFO, LOG.NPE_EXE," Card: " .. item)
    else 
        printdebug(LOG.INFO, LOG.NPE_EXE," Cards Queue is empty")
        -- npe_execution.Stop(runner_name)
    end
end

local my_decks_queue = {
    decks = {},
}

function add_to_deck(item_to_add)
    printdebug(LOG.RUN, LOG.NPE_EXE," Functor add_deck")
    printdebug(LOG.INFO, LOG.NPE_EXE," item_to_add: " .. item_to_add)

    if my_decks_queue.decks then
        -- I need to add a deck to the queue
        local item = item_to_add .. " " .. tostring(#my_decks_queue.decks + 1)
        table.insert(my_decks_queue.decks, item)
        printdebug(LOG.INFO, LOG.NPE_EXE," Queue: " .. #my_decks_queue.decks)
    end
end

-- a function used to stop the runner conditionally after a number of loops
-- returns true if runner loop_count >= max_loops, false otherwise
function maximum_loops(runner_name, description, max_loops)
    printdebug(LOG.RUN, LOG.NPE_EXE," Stop Condition")

    printdebug(LOG.INFO, LOG.NPE_EXE, description .. " " .. max_loops)
    local loop_count = npe_execution.Get_runner_count(runner_name)
    printdebug(LOG.INFO, LOG.NPE_EXE," Runner: " .. runner_name .. " loop_count: " .. loop_count)
    -- Client can use directly the npe_execution API
    if loop_count >= max_loops then
        printdebug(LOG.INFO, LOG.NPE_EXE," Reached maximum loops")
        return true
    end
    return false
end

-- default runner configuration created by the client script

local CLIENT_RUNNER_CONFIG = {
    default_infinite = {
        name = "default_infinite",
        execution = npe_execution.TYPE.INFINITE,
        start_timer = 10,
        loop_timer = 15,
        loops = nil,
        max_life = 100,
        autoremove = true,
        stop_condition = nil,        
        functor = { "test_npe_execution_client", "print_items", "default_infinite", "consume and print_items" }
        -- functor and stop_condition interface 
        -- functor[1]: script name
        -- functor[2]: function name
        -- functor[3-n]: parameters      
    },
    default_finite = {
        name = "default_finite",
        execution = npe_execution.TYPE.FINITE,
        start_timer = 0,
        loop_timer = 2,
        loops = 15,
        stop_condition = nil,        
        functor = { "test_npe_execution_client", "print_cards", "default_finite", "consume and print_cards" }
    },
    default_conditional = {
        name = "default_conditional",
        execution = npe_execution.TYPE.CONDITIONAL,
        start_timer = 10,
        loop_timer = 2,
        loops = nil,
        stop_condition = { "test_npe_execution_client", "maximum_loops", "default_conditional", " stop when loop count is ", 5 },
        functor = { "test_npe_execution_client", "add_to_deck", "default_conditional" }
    },
    non_exclusive_1 = {
        name = "non_exclusive_1",
        group_name = "test_exclusive",  
        exclusive = false,
        execution = npe_execution.TYPE.FINITE,
        start_timer = 0,
        loop_timer = 2,
        loops = 10,
        -- max_life = 100,
        -- autoremove = true,
        -- stop_condition = nil,        
        functor = { "test_npe_execution_client", "add_to_deck", "non_exclusive_1_item" }
    },
    non_exclusive_2 = {
        name = "non_exclusive_2",
        group_name = "test_exclusive",  
        exclusive = false,
        execution = npe_execution.TYPE.FINITE,
        start_timer = 0,
        loop_timer = 2,
        loops = 10,
        -- max_life = 100,
        -- autoremove = true,
        -- stop_condition = nil,        
        functor = { "test_npe_execution_client", "add_to_deck", "non_exclusive_2_item" }
    },    
    exclusive_1 = {
        name = "EXCLUSIVE_1",
        group_name = "test_exclusive",
        exclusive = true, 
        execution = npe_execution.TYPE.FINITE,
        start_timer = 5,
        loop_timer = 2,
        loops = 10,
        -- max_life = 100,
        -- autoremove = true,
        -- stop_condition = nil,        
        functor = { "test_npe_execution_client", "add_to_deck", "exclusive_1" }
    },                
}


-- fill queue callback, shows how to resume the runner

local fill_count = 2
local function fill_queue()
    printlog(LOG.RUN, LOG.NPE_EXE," Fill Queue")
    if fill_count <= 0 then return end
    printdebug(LOG.INFO, LOG.NPE_EXE," Fill coount " .. fill_count)
    for i = 1, 10 do
        table.insert(my_items_queue.items, "item" .. tostring(i))
    end
    fill_count = fill_count - 1
    npe_execution.Resume("default_infinite")
end

-- client on actor update, shows how to add a runner and start it 

local function fill_items_queues()
    for i = 1, 20 do
        table.insert(my_items_queue.items, "item" .. tostring(i))
    end
end
local function fill_cards_queues()
    for i = 1, 20 do
        table.insert(my_cards_queue.cards, "card" .. tostring(i))
    end
end

local run_toggle_loop = false
local can_stop = false
function toggle_finite_runner() -- timed event
    printdebug(LOG.RUN, LOG.NPE_EXE," Toggle Finite Runner")
    if not run_toggle_loop then return true end
    if npe_execution.Is_running() then
        if not can_stop then
            if npe_execution.Is_runner_enabled(CLIENT_RUNNER_CONFIG.default_finite.name) then
                printdebug(LOG.RUN, LOG.NPE_EXE," toggle_finite_runner Pause Runner")
                -- pause the runner without resetting its state (loop count)
                npe_execution.Pause(CLIENT_RUNNER_CONFIG.default_finite.name)
                ResetTimeEvent("test_runner", "toggle_finite_runner_execution", 10)
            else
                printdebug(LOG.ADD, LOG.NPE_EXE,"toggle_finite_runner Resume Runner")
                npe_execution.Resume(CLIENT_RUNNER_CONFIG.default_finite.name)
                ResetTimeEvent("test_runner", "toggle_finite_runner_execution", 60)
                can_stop = true
            end
        else
            printdebug(LOG.STOP, LOG.NPE_EXE," toggle_finite_runner STOP Runner")
            -- stop the runner and resets its state (loop count)
            npe_execution.Stop(CLIENT_RUNNER_CONFIG.default_finite.name)
            run_toggle_loop = false
            -- kill the timed event
            return true
        end
    else
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
        run_toggle_loop = false
        -- kill the timed event
        return true
    end
    -- keep running
    return false
end


function resume_exclusive_runner() -- timed event
    printdebug(LOG.RUN, LOG.NPE_EXE," Resume Exclusive Runner")
    if npe_execution.Is_running() then
        npe_execution.Resume(CLIENT_RUNNER_CONFIG.exclusive_1.name)
    else
        printdebug(LOG.ERROR, LOG.NPE_EXE," Execution Manager not running")
    end
    -- one shot event
    return true
end

-- end test callback, shows how to remove the runner

local function end_test()  -- timed event
    printlog(LOG.STOP, LOG.NPE_EXE," End Client Test")
    run_toggle_loop = false
    RemoveTimeEvent("test_runner", "toggle_finite_runner_execution")
    npe_execution.Remove(CLIENT_RUNNER_CONFIG.default_infinite.name)
    npe_execution.Remove(CLIENT_RUNNER_CONFIG.default_finite.name)
    npe_execution.Remove(CLIENT_RUNNER_CONFIG.default_conditional.name)
    npe_execution.Remove(CLIENT_RUNNER_CONFIG.non_exclusive_1.name)
    npe_execution.Remove(CLIENT_RUNNER_CONFIG.non_exclusive_2.name)
    npe_execution.Remove(CLIENT_RUNNER_CONFIG.exclusive_1.name)
    -- print the table my_items_queue.items
    printdebug(LOG.INFO, LOG.NPE_EXE," Items Queue")
    print_table(my_items_queue.items)    
    -- print the table my_cards_queue.cards
    printdebug(LOG.INFO, LOG.NPE_EXE," Cards Queue")
    print_table(my_cards_queue.cards)
    -- print the table my_decks_queue.decks
    printdebug(LOG.INFO, LOG.NPE_EXE," Decks Queue")
    print_table(my_decks_queue.decks)
    -- kill the timed event
    npe_execution.Manager_stop()
    return true
end

local function start_test_infinite()
    fill_items_queues()
    -- -- create an infinite runner wich will consume an item every 30 seconds
    npe_execution.Add(CLIENT_RUNNER_CONFIG.default_infinite)
    npe_execution.Resume(CLIENT_RUNNER_CONFIG.default_infinite.name)
end

local function start_test_finite()
    fill_cards_queues()
    -- create an finite runner wich will consume 10 cards from the queue
    npe_execution.Add(CLIENT_RUNNER_CONFIG.default_finite)
    npe_execution.Resume(CLIENT_RUNNER_CONFIG.default_finite.name)
    -- toggle the finite runner execution at 15 seconds in the run, to then pause it for 10 seconds
    -- this  to test that the loop count is persistent across pauses 
    -- the queue is supposed to empty after 40 seconds
    run_toggle_loop = true
    CreateTimeEvent("test_runner", "toggle_finite_runner_execution", 15, toggle_finite_runner)    
end

local function start_test_conditional()
    -- -- create a conditional runner wich will add a deck to the queue every 2 seconds
    npe_execution.Add(CLIENT_RUNNER_CONFIG.default_conditional)
    npe_execution.Resume(CLIENT_RUNNER_CONFIG.default_conditional.name)
end

local function start_test_exclusive()
    -- create an exclusive runner wich will add a deck to the queue every 2 seconds
    -- the exclusive runner will pause the non exclusive runner
    npe_execution.Add(CLIENT_RUNNER_CONFIG.non_exclusive_1)
    npe_execution.Add(CLIENT_RUNNER_CONFIG.non_exclusive_2)
    npe_execution.Add(CLIENT_RUNNER_CONFIG.exclusive_1)
    npe_execution.Resume(CLIENT_RUNNER_CONFIG.non_exclusive_1.name)
    npe_execution.Resume(CLIENT_RUNNER_CONFIG.non_exclusive_2.name)
    npe_execution.Resume(CLIENT_RUNNER_CONFIG.exclusive_1.name)
    CreateTimeEvent("test_runner", "toggle_exclusive_runner", 60, resume_exclusive_runner)
end

local test_started = false
local function client_on_update()
    if not test_started then -- only once
        printdebug(LOG.START, LOG.NPE_EXE," Start Client Test")
        test_started = true

        start_test_infinite()

        start_test_finite()

        start_test_conditional()

        start_test_exclusive()

        -- pause the runner after 180 seconds
        printlog(LOG.RGSTR, LOG.NPE_EXE," Schedule end of Test in 180 seconds")
        CreateTimeEvent("test_runner", "end_test", 100, end_test)
    end
end


function client_on_first_update()
    printlog(LOG.RUN, LOG.NPE_EXE," Client First Update")
end

if AddScriptCallback then
    AddScriptCallback("client_queue_empty")
end


function npe_on_log_update()
    printf("NPE EVENT LOG UPDATE")
    LOG = npe_manager.LOG
end

function on_game_start()
    -- test client registration
    RegisterScriptCallback("actor_on_first_update", client_on_first_update)
    RegisterScriptCallback("actor_on_update", client_on_update)
    RegisterScriptCallback("client_queue_empty", fill_queue)
end