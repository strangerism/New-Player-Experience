local printlog = npe.Printlog_npe
local printdebug = npe.Printdebug_npe
local print_table = npe.Print_table_npe

-- This file contains the events that can be used to trigger the NPE system
-- The events are defined as constants


EVENT = {

    GAME_START = { name = "Game Start",  handler = nil, module = npe.MODULE_TYPE.NONE },

    -- NPCs
    NPC_LOOTED = { name = "NPC Looted",  handler = nil, module = npe.MODULE_TYPE.NPE },
    NPC_KILLED = { name = "NPC Killed",  handler = "npc_on_death_callback", module = npe.MODULE_TYPE.ANOMALY },

    -- Mutants
    MUTANT_LOOTED = { name = "Mutant Looted",  handler = "monster_on_actor_use_callback", module = npe.MODULE_TYPE.ANOMALY },
    MUTANT_KILLED = { name = "Mutant Killed",  handler = "monster_on_death_callback", module = npe.MODULE_TYPE.ANOMALY },

    -- looting
    ITEM_TAKEN_FROM_BOX = { name = "Item Taken From Box",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ITEM_PUT_IN_BOX = { name = "Item Put In Box",  handler = nil, module = npe.MODULE_TYPE.NPE },

    -- Actor
    DAMAGE_DEALT = { name = "Damage Dealt",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_USE_MUTANT_CORPSE = { name = "Check Mutant Corpse",  handler = "monster_on_actor_use_callback", module = npe.MODULE_TYPE.ANOMALY },
    ACTOR_USE_NPC_CORPSE = { name = "Check NPC Corpse",  handler = "npc_on_use", module = npe.MODULE_TYPE.NPE },
    ACTOR_DEATH = { name = "Actor Death",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_HIT= { name = "Actor Hit",  handler = "actor_on_hit_callback", module = npe.MODULE_TYPE.ANOMALY },
    ACTOR_BLEEDING = { name = "Actor Bleeding",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_IRRADIATED = { name = "Actor Irradiated",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_HUNGRY = { name = "Actor Hungry",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_OVERWEIGHT = { name = "Actor Overweight",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_THIRSTY = { name = "Actor Thirsty",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_STRESSED = { name = "Actor Stressed",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_MAD = { name = "Actor Mad",  handler = nil, module =  npe.MODULE_TYPE.NPE },
    ACTOR_SLEEP = { name = "Actor Sleep",  handler = "actor_on_sleep", module = npe.MODULE_TYPE.NPE },
    ACTOR_RANK_UP = { name = "Actor Rank Up",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_LEVEL_UP = { name = "Actor Level Up",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_SKILL_UP = { name = "Actor Skill Up",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACTOR_PERK_UP = { name = "Actor Perk Up",  handler = nil, module = npe.MODULE_TYPE.NPE },

    -- Items
    ITEM_USED = { name = "Item Used",  handler = "actor_on_use", module = npe.MODULE_TYPE.ANOMALY },
    ITEM_TO_BELT = { name = "Item To Belt",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ITEM_TO_RACK = { name = "Item To Rack",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ITEM_TO_SLOT = { name = "Item To Slot",  handler = nil, module = npe.MODULE_TYPE.NPE }, 

    -- trades, workbenches, and inventory
    TRADE_STARTED = { name = "Trade Started",  handler = "ActorMenu_on_trade_started", module = npe.MODULE_TYPE.ANOMALY },

    -- anomalies
    -- ENTERED_RADIATION_FIELD = { name = "Entered Radiation Field",  handler = "actor_on_feeling_anomaly", module =  npe.MODULE_TYPE.NPE },
    ENTERED_ANOMALOUS_FIELD = { name = "Entered Anomalous Field",  handler = "actor_on_feeling_anomaly", module = npe.MODULE_TYPE.ANOMALY },

    -- stashes, tasks, and maps
    STASH_COORDINATES_REVEALED = { name = "Stash Coordinates Revealed",  handler = nil, module = npe.MODULE_TYPE.NPE },
    STASH_OPENED = { name = "Stash Opened",  handler = nil, module = npe.MODULE_TYPE.NPE },
    QUEST_COMPLETED = { name = "Quest Completed",  handler = nil, module = npe.MODULE_TYPE.NPE },
    QUEST_ACCEPTED = { name = "Quest Accepted",  handler = nil, module = npe.MODULE_TYPE.NPE },
    ACHIEVEMENT_EARNED = { name = "Achievement Earned",  handler = nil, module = npe.MODULE_TYPE.NPE },

    -- the zone
    SURGE = { name = "Surge",  handler = nil, module = npe.MODULE_TYPE.NPE },
    PSY_STORM = { name = "Psy Storm",  handler = nil, module = npe.MODULE_TYPE.NPE },

    -- weapons events
    WEAPON_JAM = { name = "Weapon Jam",  handler = nil, module = npe.MODULE_TYPE.NPE },
    WEAPON_REPAIR = { name = "Weapon Repair",  handler = nil, module = npe.MODULE_TYPE.NPE },
    WEAPON_MODIFICATION = { name = "Weapon Modification",  handler = nil, module = npe.MODULE_TYPE.NPE },
    WEAPON_UPGRADE = { name = "Weapon Upgrade",  handler = nil, module = npe.MODULE_TYPE.NPE },
    WEAPON_NO_AMMO = { name = "Weapon No Ammo",  handler = nil, module = npe.MODULE_TYPE.NPE },
    SCOPE_ATTACHED = { name = "Scope Attached",  handler = nil, module = npe.MODULE_TYPE.NPE },

}
-- list of all the events that can be triggered
local function isActorBleeding()
    if db.actor == nil then
        return false
    end
    local bleeding = db.actor.bleeding > 0
    return bleeding
end

local function isActorIrradiated()
    if db.actor == nil then
        return false
    end
    local irradiated = db.actor.radiation > 0
    return irradiated
end

local function isActorStressed()
    if db.actor == nil then
        return false
    end
    local stressed = db.actor.psy_health < 1
    return stressed
end

local function isActorGoingMad()
    if db.actor == nil then
        return false
    end
    local madness = db.actor.psy_health < 0.5
    return madness
end

local function isActorHungry()

    local hungry = actor_status.get_satienty(true) > 0
    return hungry
end

local function isActorOverweight()

    local overweight = actor_status.get_overweight(true) > 0
    return overweight
end

npeExecutionQueue = {}

-- table that maps the event to the function that checks if the event has been triggered

-- events handling using actor_on_update

function actor_on_update()
    if isActorBleeding() then
        npe.Activate_contexts_on(EVENT.ACTOR_BLEEDING)
    end
    if isActorIrradiated() then
        npe.Activate_contexts_on(EVENT.ACTOR_IRRADIATED)
    end
    if isActorStressed() then
        npe.Activate_contexts_on(EVENT.ACTOR_STRESSED)
    end
    if isActorGoingMad() then
        npe.Activate_contexts_on(EVENT.ACTOR_MAD)
    end
    if isActorHungry() then
        npe.Activate_contexts_on(EVENT.ACTOR_HUNGRY)
    end
    if isActorOverweight() then
        npe.Activate_contexts_on(EVENT.ACTOR_OVERWEIGHT)
    end

end

-- events handling on actor_on_first_update callbacks

-- function actor_on_first_update()
--     npe.Activate_contexts_on(EVENT.GAME_START)
-- end

-- registered callbacks' handler
local function activate_oneshot_event(event, callback)
    local f
    f = function() 
    printdebug("// [NPE] activate oneshot event "..event.name.." "..callback)
  
    npe.Activate_contexts_on(event)
    UnregisterScriptCallback(callback, f)
    end
    return f
end


function Register_npe_callbacks(npeSetsQueue)
    printlog("// [NPE] Register npe callbacks")
    for setKey, context in pairs(npeSetsQueue.contexts) do
        if context.event.module ~= npe.MODULE_TYPE.NONE then
            if context.event.module == npe.MODULE_TYPE.ANOMALY then
                printlog("Registering GAME_EVENT callback for ".. context.event.name)
                RegisterScriptCallback(context.event.handler,activate_oneshot_event(context.event, context.event.handler))    
            elseif context.event.module == npe.MODULE_TYPE.NPE then
                printlog("Registering NPE_EVENT callback for ".. context.event.name)
                -- here I should enable the NPE_EVENT handlers (execute on actor_update) and the callbacks that will react to them
            else
                printlog("Registering CUSTOM callback for ".. context.event.name)
                -- here I should enable the CUSTOM handlers (execute on actor_update) and the callbacks that will react to them
            end
        end
    end

end

function on_game_start()
    RegisterScriptCallback("actor_on_update",actor_on_update)

    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
    
end