
-- This file contains the events that can be used to trigger the NPE system
-- The events are defined as constants

GAME_START = "Game Start"

-- NPCs
NPC_LOOTED = "NPC Looted"
NPC_KILLED = "NPC Killed"

-- Mutants
MUTANT_LOOTED = "Mutant Looted"
MUTANT_KILLED = "Mutant Killed"

-- looting
ITEM_TAKEN_FROM_BOX = "Item Taken From Box"
ITEM_PUT_IN_BOX = "Item Put In Box"

-- Actor
DAMAGE_DEALT = "Damage Dealt"
ACTOR_USE_MUTANT_CORPSE = "Check Mutant Corpse"
ACTOR_USE_NPC_CORPSE = "Check Mutant Corpse"
ACTOR_DEATH = "Death"
ACTOR_HIT= "Hit Received"
ACTOR_BLEEDING= "Bleeding"
ACTOR_IRRADIATED = "Irradiated"
ACTOR_HUNGRY = "Hungry"
ACTOR_OVERWEIGHT = "Overweight"
ACTOR_THIRSTY = "Thirsty"
ACTOR_STRESSED = "Stressed"
ACTOR_MAD = "Madness"
ACTOR_SLEEP = "Sleep"
ACTOR_RANK_UP = "Rank Up"
ACTOR_LEVEL_UP = "Level Up"
ACTOR_SKILL_UP = "Skill Up"
ACTOR_PERK_UP = "Perk Up"

-- Items
ITEM_USED = "Item Used"
ITEM_TO_BELT = "Item To Belt"
ITEM_TO_RACK = "Item To Rack"
ITEM_TO_SLOT = "Item To Slot"

-- trades, workbenches, and inventory
TRADE_STARTED = "Trade Started"

-- anomalies
ENTERED_RADIATION_FIELD = "Entered Radiation Field"
ENTERED_ANOMALOUS_FIELD = "Entered Anomalous Field"

-- stashes, tasks, and maps
STASH_COORDINATES_REVEALED = "Stash Coordinates Revealed"
STASH_OPENED = "Stash Opened"
QUEST_COMPLETED = "Quest Completed"
QUEST_ACCEPTED = "Quest Accepted"
ACHIEVEMENT_EARNED = "Achievement Earned"

-- the zone
SURGE = "Surge"
PSY_STORM = "Psy Storm"

-- weapons events
WEAPON_JAM = "Weapon Jam"
WEAPON_REPAIR = "Weapon Repair"
WEAPON_MODIFICATION = "Weapon Modification"
WEAPON_UPGRADE = "Weapon Upgrade"
WEAPON_NO_AMMO = "Weapon No Ammo"
SCOPE_ATTACHED = "Scope Attached"

-- list of all the events that can be triggered
local function isActorBleeding()
    if db.actor == nil then
        return false
    end
    local bleeding = db.actor.bleeding > 0
    return bleeding
end

local function isActorIrradiated()
    if db.actor == nil then
        return false
    end
    local irradiated = db.actor.radiation > 0
    return irradiated
end

local function isActorStressed()
    if db.actor == nil then
        return false
    end
    local stressed = db.actor.psy_health < 1
    return stressed
end

local function isActorGoingMad()
    if db.actor == nil then
        return false
    end
    local madness = db.actor.psy_health < 0.5
    return madness
end

local function isActorHungry()

    local hungry = actor_status.get_satienty(true) > 0
    return hungry
end

local function isActorOverweight()

    local overweight = actor_status.get_overweight(true) > 0
    return overweight
end


-- function inventory_opened()
-- 	if (db.actor:has_info("inventory_wnd_open") or
-- 	db.actor:has_info("trade_wnd_open") or
-- 	db.actor:has_info("upgrade_wnd_open") or
-- 	db.actor:has_info("body_search_wnd_open") or
-- 	db.actor:has_info("dialog_wnd_open")) then
-- 		return true
-- 	else
-- 		return false
-- 	end
-- end

-- table that maps the event to the function that checks if the event has been triggered

-- Invoke = {
--     [ACTOR_BLEEDING] = isActorBleeding, 
--     [ACTOR_IRRADIATED] = isActorIrradiated, 
--     [ACTOR_STRESSED] = isActorStressed, 
--     [ACTOR_MAD] = isActorGoingMad, 
--     [ACTOR_HUNGRY] = isActorHungry, 
--     [ACTOR_OVERWEIGHT] = isActorOverweight, 

-- }

-- events handling using actor_on_update

function actor_on_update()
    if isActorBleeding() then
        npe.Activate_contexts_on(ACTOR_BLEEDING)
    end
    if isActorIrradiated() then
        npe.Activate_contexts_on(ACTOR_IRRADIATED)
    end
    if isActorStressed() then
        npe.Activate_contexts_on(ACTOR_STRESSED)
    end
    if isActorGoingMad() then
        npe.Activate_contexts_on(ACTOR_MAD)
    end
    if isActorHungry() then
        npe.Activate_contexts_on(ACTOR_HUNGRY)
    end
    if isActorOverweight() then
        npe.Activate_contexts_on(ACTOR_OVERWEIGHT)
    end

end

-- events handling on actor_on_first_update callbacks

function actor_on_first_update()
    npe.Activate_contexts_on(GAME_START)
end

-- registered callbacks' handler
local function activate_oneshot_event(event, callback)
    local f
    f = function() 
    printf("!activate oneshot event %s %s", event, callback)
  
    npe.Activate_contexts_on(event)
    UnregisterScriptCallback(callback, f)
    end
    return f
end

function Register_callbacks(npeSetsQueue)

    for i, v in ipairs(npeSetsQueue) do
        printlog("Registering callback for "..v.context.qualifier)
        RegisterScriptCallback(v.context.qualifier,activate_oneshot_event(v.context.qualifier, v.context.qualifier))
    end

end

function on_game_start()
    RegisterScriptCallback("actor_on_update",actor_on_update)

    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)

    RegisterScriptCallback("ActorMenu_on_trade_started",activate_oneshot_event(TRADE_STARTED, "ActorMenu_on_trade_started"))
	RegisterScriptCallback("monster_on_actor_use_callback",activate_oneshot_event(ACTOR_USE_MUTANT_CORPSE, "monster_on_actor_use_callback"))
    RegisterScriptCallback("monster_on_death_callback",activate_oneshot_event(MUTANT_KILLED, "monster_on_death_callback"))
    RegisterScriptCallback("npc_on_death_callback",activate_oneshot_event(NPC_KILLED, "npc_on_death_callback"))
    RegisterScriptCallback("npc_on_use",activate_oneshot_event(ACTOR_USE_NPC_CORPSE, "npc_on_use"))
    RegisterScriptCallback("actor_on_hit_callback",activate_oneshot_event(ACTOR_HIT, "actor_on_hit_callback"))
    RegisterScriptCallback("actor_on_feeling_anomaly", activate_oneshot_event(ENTERED_ANOMALOUS_FIELD, "actor_on_feeling_anomaly"))

    
end