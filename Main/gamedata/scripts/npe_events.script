local printlog = npe_logging.Printlog_npe
local printdebug = npe_logging.Printdebug_npe
local printtrace = npe_logging.Printtrace_npe
local print_table = npe_logging.Print_table_npe
local debug_table = npe_logging.Debug_table_npe
local print_functor = npe_logging.Print_functor_npe
local LOG = npe_logging

------------------------------------------------------------------ NPE EVENT SYSTEM ------------------------------------------------------------------
-- this file list all the functors that can be used to poll the game state for events
-- the functors are used/referenced by the Event prefabs defined in npe script or directly in the npe_modules 
-- the functors are executed by the npe_manager to trigger events

-- list of all the events that can be triggered

-- return true if the actor has the given item
function owns_item(item)
    printf("Checking if actor owns item: %s", item)
    local found = false

	local function check_items(actor,itm)
		local sec = itm:section()
        if sec == item then
            found = true
        end
	end
	db.actor:iterate_inventory(check_items,db.actor)

    return found
end
-- return true if the actor is bleeding
function on_actor_bleeding()
    if db.actor == nil then
        return false
    end
    local bleeding = db.actor.bleeding > 0
    return bleeding
end
-- return true if the actor is irradiated
function on_actor_irradiated()
    if db.actor == nil then
        return false
    end
    local irradiated = db.actor.radiation > 0
    return irradiated
end
-- return true if the actor is stressed
function on_actor_stressed()
    if db.actor == nil then
        return false
    end
    local stressed = db.actor.psy_health < 1
    return stressed
end
-- return true if the actor is experiencing madness
function on_actor_mad()
    if db.actor == nil then
        return false
    end
    local madness = db.actor.psy_health < 0.5
    return madness
end
-- return true if the actor is hungry
function on_actor_hungry()
    local hungry = actor_status.get_satienty(true) > 0
    return hungry
end
-- return true if the actor is overweight
function on_actor_overweight()
    local overweight = actor_status.get_overweight(true) > 0
    return overweight
end

function on_actor_thirsty()
    -- local thirsty = actor_status.get_thirst(true) > 0
    -- return thirsty
    return false
end

-- returns true if set has been played, completed
function on_set_completed(module, set_id)
    return  npe_mcm.npe_module_get_setting(module, set_id)
end
-- returns true if all sets have been played, completed
function on_sets_completed(module, set_id_table)
    for _, set_id in ipairs(set_id_table) do
        if not on_set_completed(module, set_id) then
            return false
        end
    end
    return true
end
-- return true if the actor is on a task
function is_on_task(task)
    printdebug(LOG.INFO, LOG.EVENT," looking for task " .. task)
    local has_task = false
    task_manager.task_ini:section_for_each(function(task_id)
        if db.actor:get_task(task_id, true) and task_id == task then
            printdebug(LOG.INFO, LOG.EVENT," found task " .. task_id)
            has_task = true
        end
      end)
    return has_task
end

-- return true if the actor is near a smart terrain with the given name
local default_limit_distance = 50
function on_near_smart_terrain(smart_name, near_distance)
    if near_distance == nil then
        near_distance = default_limit_distance
    end
    local id = smart_terrain.nearest_to_actor_smart.id
    
    local smart = id and alife_object(id)
    if smart and smart:name() == smart_name then
        local dist = smart and smart.position:distance_to(db.actor:position())
        printdebug(LOG.INFO, LOG.EVENT," looking for smart " .. smart_name .. ", found " .. smart:name() .. " at distance" .. dist .. ", limit " .. near_distance)
        if dist and dist < near_distance then
            return true
        end
    end    
    return false
end

-- return true if the actor is near a game object with the id
local default_limit_distance = 5
function on_near_game_object(id, near_distance)
    if near_distance == nil then
        near_distance = default_limit_distance
    end
    printdebug(LOG.INFO, LOG.EVENT," looking for game object " .. id .. " at distance " .. near_distance)
    local se_obj = id and alife_object(id)
    if (not se_obj) or not (se_obj and se_obj.online) then 
        printdebug(LOG.INFO, LOG.ACTION," game_object does not exist or is not online")
        return 
    end
    local szpos = se_obj.position
    local dist = szpos:distance_to(db.actor:position()) or 0
    printdebug(LOG.INFO, LOG.EVENT," distance to game object " .. id .. " is " .. dist)
    if dist <= near_distance then
        return true
    else
        return false
    end
end

-- general monkey patching

-- saves the last npc talked to
Last_npc_talked = nil
local who_is_npc_mp = dialogs.who_is_npc
function dialogs.who_is_npc(first_speaker, second_speaker)
    local npc = who_is_npc_mp(first_speaker, second_speaker)
    npe_events.Last_npc_talked = npc:character_name()
    printdebug(LOG.INFO, LOG.EVENT, "Last_npc_talked = " .. tostring(npe_events.Last_npc_talked))
	return npc
end

-- for debugging monkey patching
local function actor_on_update()
    -- printdebug(LOG.INFO, LOG.EVENT," Last_npc_talked = " .. tostring(Last_npc_talked))

    -- if on_near_smart_terrain(SMART_TERRAIN.cordon_loners_base) then
    --     printdebug(LOG.INFO, LOG.EVENT," Near cordon_loners_base ")
    -- end
    -- if on_near_smart_terrain(SMART_TERRAIN.cordon_military_base) then
    --     printdebug(LOG.INFO, LOG.EVENT," Near cordon_military_base ")
    -- end
    -- if smart_terrain.nearest_to_actor_smart.id then
    --     local id = smart_terrain.nearest_to_actor_smart.id
    --     printdebug(LOG.INFO, LOG.EVENT," Near smart terrain " .. smart_terrain.nearest_to_actor_smart.id)
    --     local smart = id and alife_object(id)
    --     if smart and smart:name() then
    --         printdebug(LOG.INFO, LOG.EVENT," Near smart terrain " .. smart:name())
    --     end
    -- end

    -- if npe_is_on_task(TASK.fanatic_training_day_boar_hunting) then
    --     printdebug(LOG.INFO, LOG.EVENT," On task Training Day: Boar Hunting")
    -- end
    
end


function on_game_start()
    RegisterScriptCallback("actor_on_update", actor_on_update)
end