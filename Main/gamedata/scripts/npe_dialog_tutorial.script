
local printlog = npe_manager.Printlog_npe
local printdebug = npe_manager.Printdebug_npe
local get_console_cmd = get_console_cmd
local exec_console_cmd = exec_console_cmd
local sound_object = sound_object
local npe_dialog = npe_dialog
local db = db
local game = game
local ui_events = ui_events
local DIK_keys = DIK_keys
local Register_UI = Register_UI
local Unregister_UI = Unregister_UI
local CUIScriptWnd = CUIScriptWnd
local CScriptXmlInit = CScriptXmlInit
local InitStatic = InitStatic
local InitFrame = InitFrame
local InitTextWnd = InitTextWnd
local Init3tButton = Init3tButton
local InitTexture = InitTexture
local vector2 = vector2
local device = device
local GetFontGraffiti50Russian = GetFontGraffiti50Russian
local CreateTimeEvent = CreateTimeEvent
local ResetTimeEvent = ResetTimeEvent
GUI = nil -- instance, don't touch

GAMETIME_STATE = npe_dialog.GAMETIME_STATE
Sounds = npe_dialog.Sounds

local SOUNDS_SET

function Play(set)
	if set == nil then
		printdebug("[NPE][UI] Play set is nil")
		npe_manager.Resume_execution()
		return
	end
	npe_manager.Register_dialog(set.dialog)

	SOUNDS_SET = npe_manager.Settings.sounds_set

    printdebug("[NPE][UI] Play set module: " .. set.module .. " set : " .. set.id)
	printdebug("[NPE][UI] Play set title: " .. set.title)
	printdebug("[NPE][UI] Sounds set: " .. SOUNDS_SET)
	if npe_manager.Settings.pause_game or set.context.pause_game then
    	npe_dialog.Change_gametime_to(GAMETIME_STATE.STOPPED)
	end

	npe_dialog.Play_sound(Sounds[SOUNDS_SET].open)
    
	printdebug("[NPE][UI] Creating GUI")
    GUI = UINewPlayerExperience(set)

	if (GUI) and (not GUI:IsShown()) then
        printdebug("[NPE][UI] Showing GUI")
		GUI:ShowDialog(true)
		Register_UI("UINewPlayerExperience","npe_dialog")
    else
        printdebug("[NPE][UI] GUI already shown")
		npe_manager.Resume_execution()
		return
    end
end

local xml = nil
function LoadUIStatic(dialog)
	printdebug("[NPE][UI] LoadUIStatic")
	if not xml then
		printdebug("[NPE][UI] Loading " .. dialog .. ".xml")
		xml = CScriptXmlInit()
		xml:ParseFile(dialog .. ".xml")
	end
end

-------------------------------------------------------------------
class "UINewPlayerExperience" (CUIScriptWnd)

function UINewPlayerExperience:__init(set) super()
	self:InitControls(set)
end

function UINewPlayerExperience:__finalize()
end

function UINewPlayerExperience:InitControls(set)
    printdebug("[NPE][UI] InitControls")
	self:SetWndRect			(Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)
	self.set = set
    LoadUIStatic(set.dialog)
    self.xml = xml
	self.dialog	= xml:InitStatic(set.dialog, self)
	self.frame	= xml:InitFrame(set.dialog .. ":frame", self.dialog)
	
	self.context = xml:InitTextWnd(set.dialog .. ":context",self.dialog)
	self.context:SetText("%c[0,255,208,0]" .. "NPE > " .. set.context.event.name)

	local text
	text = game.translate_string(self.set.title)
	self.set_title = xml:InitTextWnd(set.dialog .. ":set_title",self.dialog)
	self.set_title:SetText(text)

	-- card context
	self.cardIndex = 1
	if self.set.cards[self.cardIndex] then
		if self.set.cards[self.cardIndex].title then
			text = game.translate_string(self.set.cards[self.cardIndex].title)
		else
			text = game.translate_string(self.set.title)
		end
		self.card_title = xml:InitTextWnd(set.dialog .. ":card_title",self.dialog)
		self.card_title:SetText(text)
	
		self.top_line = xml:InitStatic(set.dialog .. ":top_line",self.dialog)

		self.card_description = xml:InitTextWnd(set.dialog .. ":card_description",self.dialog)
		text = game.translate_string(self.set.cards[self.cardIndex].description)
		self.card_description:SetText(text)

		self.card_image = xml:InitStatic(set.dialog .. ":card_image",self.dialog)
		self.card_image:InitTexture(self.set.cards[self.cardIndex].image)
	end

    self.bottom_line = xml:InitStatic(set.dialog .. ":bottom_line",self.dialog)

    self.card_index = xml:InitTextWnd(set.dialog .. ":card_index",self.dialog)
	local max_card = #self.set.cards > 3 and 3 or #self.set.cards
	self.card_index:SetText(self.cardIndex .. "/" .. max_card)

    self.btn_close = xml:Init3tButton(set.dialog .. ":btn_close", self.dialog)
	self:Register(self.btn_close, "btn_close")	
	self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.OnButtonClose, self)

	local current_gametime_state = npe_dialog.Get_game_time()
    self.btn_pause = xml:Init3tButton(set.dialog .. ":btn_pause", self.dialog)
	self:Register(self.btn_pause, "btn_pause")	
	self:AddCallback("btn_pause", ui_events.BUTTON_CLICKED, self.OnButtonGametime, self)

    self.btn_resume = xml:Init3tButton(set.dialog .. ":btn_resume", self.dialog)
	self:Register(self.btn_resume, "btn_resume")	
	self:AddCallback("btn_resume", ui_events.BUTTON_CLICKED, self.OnButtonGametime, self)	
	
    self.btn_next = xml:Init3tButton(set.dialog .. ":btn_next", self.dialog)
	self:Register(self.btn_next, "btn_next")	
	self:AddCallback("btn_next", ui_events.BUTTON_CLICKED, self.OnButtonNext, self)

    self.btn_prev = xml:Init3tButton(set.dialog .. ":btn_prev", self.dialog)
    self:Register(self.btn_prev, "btn_prev")	
	self:AddCallback("btn_prev", ui_events.BUTTON_CLICKED, self.OnButtonPrev, self)

	self:UpdateButtons()
end

function UINewPlayerExperience:UpdateButtons()
	printdebug("[NPE][UI] UpdateButtons")
	self.btn_prev:Show(true)
	self.btn_next:Show(true)
	if self.cardIndex == 1 then
		self.btn_prev:Show(false)
	else
		self.btn_prev:Show(true)
	end

	if self.cardIndex == 3 or self.cardIndex == #self.set.cards then
		self.btn_next:Show(false)
	else
		self.btn_next:Show(true)
	end
	self:UpdateGametimeButtons()
end

function UINewPlayerExperience:OnButtonClose()
    self:Close()
end

function UINewPlayerExperience:OnButtonNext()
    printdebug("[NPE][UI] OnButtonNext")
	self.cardIndex = self.cardIndex + 1
	if self.cardIndex <= #self.set.cards and self.cardIndex <= 3 and self.set.cards[self.cardIndex] then
		local text
		if self.set.cards[self.cardIndex].title then
			text = game.translate_string(self.set.cards[self.cardIndex].title)
		else
			text = game.translate_string(self.set.title)
		end
		self.card_title:SetText(text)
	
		text = game.translate_string(self.set.cards[self.cardIndex].description)
		self.card_description:SetText(text)

		self.card_image:InitTexture(self.set.cards[self.cardIndex].image)
		local max_card = #self.set.cards > 3 and 3 or #self.set.cards
		self.card_index:SetText(self.cardIndex .. "/" .. max_card)
	else
		self.cardIndex = 3
	end
	npe_dialog.Play_sound(Sounds[SOUNDS_SET].next)
	self:UpdateButtons()
end

function UINewPlayerExperience:OnButtonPrev()
    printdebug("[NPE][UI] OnButtonPrev")
	self.cardIndex = self.cardIndex - 1
	if self.cardIndex > 0 and self.set.cards[self.cardIndex] then
		local text
		if self.set.cards[self.cardIndex].title then
			text = game.translate_string(self.set.cards[self.cardIndex].title)
		else
			text = game.translate_string(self.set.title)
		end
		self.card_title:SetText(text)
	
		text = game.translate_string(self.set.cards[self.cardIndex].description)
		self.card_description:SetText(text)

		self.card_image:InitTexture(self.set.cards[self.cardIndex].image)

		local max_card = #self.set.cards > 3 and 3 or #self.set.cards
		self.card_index:SetText(self.cardIndex .. "/" .. max_card)
	else
		self.cardIndex = 1
	end
	npe_dialog.Play_sound(Sounds[SOUNDS_SET].prev)
	self:UpdateButtons()
end

function UINewPlayerExperience:UpdateGametimeButtons()
	local state = npe_dialog.Get_game_time()
	if state == GAMETIME_STATE.STOPPED then
		self.btn_pause:Show(false)
		self.btn_resume:Show(true)
	else
		self.btn_pause:Show(true)
		self.btn_resume:Show(false)
	end
end

function UINewPlayerExperience:OnButtonGametime()
	printdebug("[NPE][UI] OnButtonGametime")
	npe_dialog.Flip_time()
	self:UpdateGametimeButtons()
end

function UINewPlayerExperience:Close()
	self:HideDialog()
	self:Show(false)
	Unregister_UI("UINewPlayerExperience")
	GUI = nil    
	npe_dialog.Play_sound(Sounds[SOUNDS_SET].close)
	npe_dialog.Change_gametime_to(GAMETIME_STATE.INMOTION)
	npe_manager.Unregister_dialog(self.set.dialog)
	npe_manager.Resume_execution()
end

function UINewPlayerExperience:TearDown()
	self:HideDialog()
	self:Show(false)
	Unregister_UI("UINewPlayerExperience")
	GUI = nil    
end
function UINewPlayerExperience:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	if (res == false) then
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				printdebug("[NPE][UI] OnKeyboard DIK_ESCAPE")
				self:Close()
			end
			if dik == DIK_keys.DIK_SPACE then
				printdebug("[NPE][UI] OnKeyboard DIK_SPACE")
				self:OnButtonGametime()
			end			
		end
    end
    return res
end