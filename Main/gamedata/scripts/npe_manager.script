-- scripts namespace
local npe = npe
local npe_mcm = npe_mcm
local execute_func = execute_func
local printf = printf
local unpack = unpack
-- local table = table
-- local pairs = pairs
local AddScriptCallback = AddScriptCallback
local SendScriptCallback = SendScriptCallback
local CreateTimeEvent = CreateTimeEvent
local RemoveTimeEvent = RemoveTimeEvent
local ResetTimeEvent = ResetTimeEvent
local UnregisterScriptCallback = UnregisterScriptCallback
local RegisterScriptCallback = RegisterScriptCallback

-- NPE Data Structures

local npeConfig = {
    decks = {},
}

local npeSetsActivationQueue = {
    contexts = {},
}

local playableQueue = {
    setsKeys = {},
}

local playableHighPrioQueue = {
    setsKeys = {},
}

local playableOnCountdownQueue = {
    setsKeys = {},
}
local npeExecutionQueue = {
    handlers = {},
}

Settings = {
    debug_logs = true,
    enable = true,
    execution_loop = 3,
    play_loop = 10,
    sounds_set = "NPE"
}

RegisteredCustomCallbacks = {}

-- NPE FLAGS
Dialog_in_use = false
Dialog_name = nil

-- NPE Utils

local function printlog(msg,...)
	msg = msg or " "
	
	if select('#', ...) ~= 0 then printf(string.format(msg,...))
	else printf(msg)
	end
end

local function printdebug(msg,...) -- debug logging
	if Settings.debug_logs then printlog(msg,...) end
end
Printlog_npe = printlog
Printdebug_npe = printdebug

local function print_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printlog(indent .. '' .. key .. ':')
            print_table(value, indent .. '  ')
        else
            printlog(indent .. key .. ': ' .. tostring(value))
        end
    end
end
Print_table_npe = print_table

local function debug_table(t, indent)
    if not t then
        return
    end
    indent = indent or ''
    for key, value in pairs(t) do
        if type(value) == 'table' then
            printdebug(indent .. '' .. key .. ':')
            debug_table(value, indent .. '  ')
        else
            printdebug(indent .. key .. ': ' .. tostring(value))
        end
    end
end
Debug_table_npe = debug_table

-- NPE hashing functions

local function map_to_set_key(deckId, setId)
    return deckId .. "/" .. setId
end

local function map_from_set_key(key)
    local split = string.gmatch(key, "[^/]+")
    local deckId = split()
    local setId = split()
    return deckId, setId
end

local function get_set_from_key(key)
    local deckId, setId = map_from_set_key(key)
    local deck = npeConfig.decks[deckId]
    if deck ~= nil then
        return deck.sets[setId], deckId, deck.module, deck.dialog
    end
    return nil
end

-- NPE Modules registration

local function add_deck(npeDeck)
    if npeDeck ~= nil then
        if npeConfig.decks[npeDeck.id] == nil then
            local indexedSets = {}
            for _, set in pairs(npeDeck.sets) do
                if not set.disabled then
                indexedSets[set.id] = set
                end
            end
            npeDeck.sets = indexedSets
            npeConfig.decks[npeDeck.id] = npeDeck
        else
            printlog("![NPE][CONF] Deck with id [" .. npeDeck.id .. "] already exists.")
        end
    end
end

function Register_npe_module(deck)

    printlog("//[NPE][".. deck.id .. "] Adding deck " .. deck.title .. " to NPE Manager.")
    add_deck(deck)
end

-- NPE decks update from MCM

local function update_decks_from_mcm()
    printdebug("//[NPE][CONF] Update decks from MCM")
    for deckId, deck in pairs(npeConfig.decks) do
        for setId, set in pairs(deck.sets) do
            set.played = npe_mcm.npe_module_get_setting(deck.module, set.id)
            -- reset the overridden flag
            if set.overridden then
                set.overridden = false
            end
            if set.context.event.handler.executed then
                set.context.event.handler.executed = false
            end
            if set.context.countdown then
                set.context.countdown = nil
            end
        end
    end
end

local function override_cards(set, setToOverride)
    for cardKey, card in pairs(set.cards) do
        if setToOverride.cards[cardKey] ~= nil then
            for fieldKey, fieldValue in pairs(card) do
                if fieldValue ~= nil then
                    printdebug("[NPE][OVERR] Override card [%s] field [%s] with value [%s]", cardKey, fieldKey, fieldValue)
                    setToOverride.cards[cardKey][fieldKey] = fieldValue
                end
            end
        end
    end
    return setToOverride
end

local function override_contexts(context, setToOverride)
    for contextKey, contextValue in pairs(context) do
        if contextKey ~= "override" and contextValue ~= nil then
            printdebug("[NPE][OVERR] Override context [%s] with value [%s]", contextKey, contextValue)
            setToOverride.context[contextKey] = contextValue
        end
    end
    return setToOverride
end

local function apply_overrides_to_decks()
    printdebug("//[NPE][CONF] Apply overrides to decks")
    for deckId, deck in pairs(npeConfig.decks) do
        printdebug("[NPE][OVERR] Searching into Deck [%s]:", deckId)
        for setId, set in pairs(deck.sets) do
            printdebug("[NPE][OVERR] Searching into Set [%s]:", setId)
            if set.context and set.context.override and not set.played then
                printdebug("[NPE][OVERR] Set [%s] has override rules:", setId)
                debug_table(set.context.event.override)
                local overrideDeckId = set.context.override.deckId
                local overrideSetId = set.context.override.setId
                if npeConfig.decks[overrideDeckId] and npeConfig.decks[overrideDeckId].sets[overrideSetId] then
                    local setToOverride = npeConfig.decks[overrideDeckId].sets[overrideSetId]
                    printdebug("[NPE][OVERR] Override set [%s] data with content from set [%s]", setToOverride.id, set.id)
                    setToOverride = override_cards(set, setToOverride)
                    if set.title then
                        setToOverride.title = set.title
                        printdebug("[NPE][OVERR] Override set [%s] title with [%s]", setToOverride.id, set.title)
                    end
                    setToOverride = override_contexts(set.context, setToOverride)
                    -- set the overridden flag to this set is not added to the activation queue
                    set.overridden = true
                    -- upodate the npeConfig.decks table with the new changes
                    npeConfig.decks[deckId].sets[setId] = set
                    npeConfig.decks[overrideDeckId].sets[overrideSetId] = setToOverride                    
                else
                    printlog("![NPE][OVERR] Deck with id [%s] or Set with id [%s] to for overriding, does not exist.", overrideDeckId, overrideSetId)
                end
            end
        end
    end
end

-- NPE Queues

local function compare_events(event1, event2)
    if event1.name ~= event2.name then
        return false
    end
    if event1.module ~= event2.module then
        return false
    end
    return true
end

local function find_sets_on(event)
    printdebug("[NPE][ACTIV] Find sets activating on event [%s]", event.name)
    local setsKeys = {}
    for setKey, queued_context in pairs(npeSetsActivationQueue.contexts) do
        if compare_events(queued_context.event, event) then
            printdebug("[NPE][ACTIV] queued context [%s]", setKey)
            table.insert(setsKeys, setKey)
        end
    end
    return setsKeys
end

local function add_to_sets_queue(set, deckId, module)
    -- printdebug("[NPE][QUEUE] Add sets to activation queue: [%s] [%s]", deckId, set.id)
    local setKey = map_to_set_key(deckId, set.id)
    -- printdebug("[NPE][QUEUE] setKey [%s]", setKey)
    if set ~= nil then
        -- do not queue a set that was used to override another set
        if set.overridden then return end
        -- Create a context table with the event and delay from the set
        local context = {
            event = set.context.event,
            delay = set.context.delay,
            pause_game = set.context.pause_game,
        }
        if not context.event.handler.module then
            context.event.handler.module = module
        end
        -- Check if a context with the same contextId already exists
            if npeSetsActivationQueue.contexts[setKey] == nil then
                -- Add the new context to the table with contextId as the key
                npeSetsActivationQueue.contexts[setKey] = context
            printdebug("[NPE][QUEUE] context with id [" .. setKey .. "] added to the queue with event [" .. context.event.name .. "] and module [" .. context.event.handler.module .. "]")
            else 
            -- TODO we should use here THE context.override directive to replace the contexts
                printlog("![NPE][QUEUE] context with id [" .. setKey .. "] already exists.")
            printlog("![NPE][QUEUE] context event [" .. context.event.name .. "] and module [" .. context.event.handler.module .. "]")
            end
    end
end

local function add_to_playable_queue(setsKeys)
    if setsKeys == nil then
        return
    end
    for i, setKey in ipairs(setsKeys) do
        -- add set to the playable queue
        local set, deckId, module = get_set_from_key(setKey)
        if set then
            if set.context.delay then 
                if set.context.delay == 0 then
                    printdebug("[NPE][QUEUE] Set [%s] plays instantly - Set added to the play_now queue", setKey)
                    table.insert(playableHighPrioQueue.setsKeys, setKey)                
                else 
                    printdebug("[NPE][QUEUE] Set [%s] has a delay of [%s] - Set added to the countdown queue", setKey, set.context.delay)
                    table.insert(playableOnCountdownQueue.setsKeys, setKey)
                end
            else
                printdebug("[NPE][QUEUE] Set [%s] plays with default play_loop - Set added to the play queue", setKey)
                table.insert(playableQueue.setsKeys, setKey)
            end
            -- removes it from the npeSetsActivationQueue
            npeSetsActivationQueue.contexts[setKey] = nil            
        end
    end
end

local function add_to_execution_queue(handler)
    if handler == nil then
        return
    end
    table.insert(npeExecutionQueue.handlers, handler)
end

local function update_activation_queue()
    printdebug("//[NPE][QUEUE] Update activation queue")
    npeSetsActivationQueue = {
        contexts = {},
    }
    for deckId, deck in pairs(npeConfig.decks) do
        for setId, set in pairs(deck.sets) do
            -- Only call add_to_sets_queue if set.played is false
            if set.played == false then
                add_to_sets_queue(set, deck.id, deck.module)
            end
        end
    end
end

local function update_queued_contexts_countdowns()
    if playableOnCountdownQueue.setsKeys and #playableOnCountdownQueue.setsKeys > 0 then
        for i, setKey in ipairs(playableOnCountdownQueue.setsKeys) do
            local set, deckId, module = get_set_from_key(setKey)
            if set and set.context.delay and set.context.delay > 0 then
                if not set.context.countdown then
                    printdebug("[NPE][QUEUE] Play Set [%s] has a delay of %s", set.id, set.context.delay)
                    set.context.countdown = set.context.delay
                elseif set.context.countdown > 0 then
                    printdebug("[NPE][QUEUE] Context [%s] countdown is %s", set.context.event.name, set.context.countdown)
                    set.context.countdown = set.context.countdown - 1
                elseif set.context.countdown == 0 then
                    printdebug("[NPE][QUEUE] Context [%s] countdown is over", set.context.event.name)
                    table.insert(playableQueue.setsKeys, setKey)
                    table.remove(playableOnCountdownQueue.setsKeys, i)
                end
            end
        end
    end
end

-- NPE Activation and Execution

function Activate_contexts_on(event)
    printdebug("//[NPE][ACTIV] Activate contexts on [%s]", event.name)
    local setsKeys = find_sets_on(event)
    if setsKeys then
        printdebug("-[NPE][ACTIV] Found sets on [%s]", event.name)
        print_table(setsKeys)
        add_to_playable_queue(setsKeys)
    end
end

local function run_execution_queue()
    printdebug("//[NPE][EXEC] Run execution queue")
    for i, handler in ipairs(npeExecutionQueue.handlers) do
        if not handler.executed then
            printdebug("[NPE][EXEC] Running handler [%s]", handler.name)
            local success = execute_func(unpack(handler.functor))   
            if success then
                printdebug("[NPE][EXEC] Handler [%s] executed. Success: %s", handler.name, success)
                handler.executed = true
                if AddScriptCallback then
                    printdebug("[NPE][RGSTR] SendScriptCallback [%s]", handler.callback_name)
                    SendScriptCallback(handler.callback_name)
                    table.remove(npeExecutionQueue.handlers, i)
                end
            end
        end
    end
end

-- NPE Play sets

local function start_dialog(set)
    printlog("[NPE][PLAY] Starting dialog [%s]",set.dialog .. "_dialog")
    local dialog_functor = {set.dialog .. "_dialog", "Play", set}
    execute_func(unpack(dialog_functor))
end

local function tear_down_dialog()
    local dialog_functor = {Dialog_name .. "_dialog", "TearDown"}
    execute_func(unpack(dialog_functor))
end

-- used by the dialog to register back to the NPE
function Register_dialog(dialog)
    Dialog_name = dialog
    Dialog_in_use = true
end
function Unregister_dialog()
    Dialog_name = nil
    Dialog_in_use = false
end

local function play_set(set)
    printdebug("[NPE][PLAY] Playing set [%s] from module [%s]", set.id, set.module)
    printdebug("[NPE][PLAY] Set Title: [%s]", set.title)

    set.played = true
    npe_mcm.npe_module_set_setting(set.module, set.id, true)
    
    Pause_Execution()

    start_dialog(set)
end

local function play_queued_set()
    if playableQueue.setsKeys and #playableQueue.setsKeys > 0 then
        local setKey = table.remove(playableQueue.setsKeys, 1)
        local set, deckId, module, dialog = get_set_from_key(setKey)
        if set ~= nil then
            set.deckId = deckId
            set.module = module
            if not Dialog_in_use then
                if not set.dialog then
                    set.dialog = dialog
                end
                play_set(set)
            else
                -- cannot play set, UI is busy. Put it back in the queue
                table.insert(playableQueue.setsKeys, setKey)
            end
        end
    end
end

local function play_now_set()
    if playableHighPrioQueue.setsKeys and #playableHighPrioQueue.setsKeys > 0 then
        local setKey = table.remove(playableHighPrioQueue.setsKeys, 1)
        local set, deckId, module, dialog = get_set_from_key(setKey)    
        if set ~= nil then
            set.deckId = deckId
            set.module = module
            if not Dialog_in_use then
                if not set.dialog then
                    set.dialog = dialog
                end
                play_set(set)
            else
                -- cannot play set, UI is busy. Put it back in the queue
                table.insert(playableHighPrioQueue.setsKeys, setKey)
            end
        end
    end
end

---- NPE Execution ----

-- Execution loop
local run_execution_loop = false
local run_execution_loop_name = 'NPE_Execution_Loop'

local function npe_execution_loop()
    if not run_execution_loop then return true end
    printdebug("//[NPE][EXEC] Execution loop")
    ResetTimeEvent(run_execution_loop_name, run_execution_loop_name, Settings.execution_loop)

    run_execution_queue()

    return false
end
local function pause_execution_loop()
    if not run_execution_loop then return end
    printdebug("![NPE][EXEC] pausing contexts activation loop")
    run_execution_loop = false
end

local function resume_execution_loop()
    if run_execution_loop then return end
    printdebug("-[NPE][EXEC] resuming contexts activation loop")
    run_execution_loop = true

    CreateTimeEvent(run_execution_loop_name, run_execution_loop_name, Settings.execution_loop, npe_execution_loop) -- offset time execution_loop
end

local function remove_execution_loop()
    RemoveTimeEvent(run_execution_loop_name, run_execution_loop_name)
end

-- Context Countdowns loop
local run_context_countdowns_loop = false
local run_context_countdowns_name = 'NPE_Countdowns_Loop'
local context_countdowns_loop = 1
local function npe_context_countdowns_loop()
    if not run_context_countdowns_loop then return true end
    printdebug("//[NPE][EXEC] Context Countdown loop")
    ResetTimeEvent(run_context_countdowns_name, run_context_countdowns_name, context_countdowns_loop) -- offset time context_countdowns_loop

    update_queued_contexts_countdowns()

    return false
end
local function pause_context_countdowns_loop()
    if not run_context_countdowns_loop then return end
    printdebug("![NPE][EXEC] pausing context countdowns loop")
    run_context_countdowns_loop = false
end

local function resume_context_countdowns_loop()
    if run_context_countdowns_loop then return end
    printdebug("-[NPE][EXEC] resuming context countdowns loop")
    run_context_countdowns_loop = true
    CreateTimeEvent(run_context_countdowns_name, run_context_countdowns_name, context_countdowns_loop, npe_context_countdowns_loop) -- offset time context_countdowns_loop
end

local function remove_context_countdowns_loop()
    RemoveTimeEvent(run_context_countdowns_name, run_context_countdowns_name)
end

-- Play Queued loop
local run_play_loop = false
local play_loop_name = 'NPE_Play_Loop'

local function npe_play_loop()
    if not run_play_loop then return true end
    printdebug("//[NPE][EXEC] Play loop")
    ResetTimeEvent(play_loop_name, play_loop_name, Settings.play_loop)

    play_queued_set()

    return false
end

local function pause_play_loop()
    if not run_play_loop then return end
    printdebug("![NPE][EXEC] pausing play loop")
    run_play_loop = false
end

local function resume_play_loop()
    if run_play_loop then return end
    printdebug("-[NPE][EXEC] resuming play loop")
    run_play_loop = true
    CreateTimeEvent(play_loop_name, play_loop_name, Settings.play_loop, npe_play_loop) -- offset time play_loop
end

local function remove_play_loop()
    RemoveTimeEvent(play_loop_name, play_loop_name)
end

-- Play Now loop
local run_play_now_loop = false
local play_now_loop_name = 'NPE_Play_Now_Loop'
local play_now_loop = 1
local function npe_play_now_loop()
    if not run_play_now_loop then return true end
    printdebug("//[NPE][EXEC] Play Now loop")
    ResetTimeEvent(play_now_loop_name, play_now_loop_name, play_now_loop) -- offset time play_now_loop

    play_now_set()

    return false
end

local function pause_play_now_loop()
    if not run_play_now_loop then return end
    printdebug("![NPE][EXEC] pausing play_now loop")
    run_play_now_loop = false
end

local function resume_play_now_loop()
    if run_play_now_loop then return end
    printdebug("-[NPE][EXEC] resuming play_now loop")
    run_play_now_loop = true
    CreateTimeEvent(play_now_loop_name, play_now_loop_name, play_now_loop, npe_play_now_loop) -- offset time play_now_loop
end

local function remove_play_now_loop()
    RemoveTimeEvent(play_now_loop_name, play_now_loop_name)
end

-- Play queues manager
local run_play_queues_manager_loop = false
local play_queues_manager_loop_name = 'NPE_Play_Queues_Manager_Loop'
local queue_manager_loop = 1
local function play_queues_manager_loop()
    if not run_play_queues_manager_loop then return true end
    printdebug("//[NPE][EXEC] Play Queues Manager loop")
    ResetTimeEvent(play_queues_manager_loop_name, play_queues_manager_loop_name, queue_manager_loop) -- offset time queue_manager_loop

    -- manages the play queues
    if #playableHighPrioQueue.setsKeys > 0 then
        pause_play_loop()
        resume_play_now_loop()
        return
    else
        pause_play_now_loop()
    end

    if #playableQueue.setsKeys > 0 then
        resume_play_loop()
    else
        pause_play_loop()
    end

    return false
end

local function pause_play_queues_manager_loop()
    if not run_play_queues_manager_loop then return end
    printdebug("![NPE][EXEC] pausing play_queues_manager loop")
    run_play_queues_manager_loop = false
    pause_play_loop()
    pause_play_now_loop()    
end

local function resume_play_queues_manager_loop()
    if run_play_queues_manager_loop then return end
    printdebug("-[NPE][EXEC] resuming play_queues_manager loop")
    run_play_queues_manager_loop = true
    CreateTimeEvent(play_queues_manager_loop_name, play_queues_manager_loop_name, queue_manager_loop, play_queues_manager_loop) -- offset time queue_manager_loop
end

local function remove_play_queues_manager_loop()
    remove_play_loop()
    remove_play_now_loop()
    RemoveTimeEvent(play_queues_manager_loop_name, play_queues_manager_loop_name)
end

-- Execution controls

function Resume_execution() 
    resume_play_queues_manager_loop()
    resume_execution_loop()
end

function Pause_Execution()
    pause_play_queues_manager_loop()
    pause_execution_loop()
end


-- Activation and Registration

local function activate_oneshot_event(event, callback)
    local f
    f = function() 
    printdebug("//[NPE][ACTIV] Callback for oneshot event ["..event.name .. "] activated")

    printdebug("![NPE][RGSTR] Unregistering callback [" ..callback .. "]")
    UnregisterScriptCallback(callback, f)

    Activate_contexts_on(event)
    end
    return f
end

function Register_npe_callbacks()
    printdebug("//[NPE][RGSTR] Register npe callbacks")
    for setKey, context in pairs(npeSetsActivationQueue.contexts) do
        if context.event.handler.module ~= npe.MODULE_TYPE.NONE then
            if context.event.handler.module == npe.MODULE_TYPE.ANOMALY then
                printdebug("-[NPE][RGSTR] Registering ANOMALY callback [" .. context.event.handler.name .. "] for [".. context.event.name .. "]")
                RegisterScriptCallback(context.event.handler.name,activate_oneshot_event(context.event, context.event.handler.name))    
            else
                -- here I should enable the CUSTOM handlers (execute on actor_update) and the callbacks that will react to them
                if AddScriptCallback then
                    local callback_name = context.event.handler.module .. "_" .. context.event.handler.name
                    context.event.handler.callback_name = callback_name
                    add_to_execution_queue(context.event.handler)
                    if not RegisteredCustomCallbacks[callback_name] then
                        RegisteredCustomCallbacks[callback_name] = true
                        AddScriptCallback(callback_name)
                    end
                    printdebug("-[NPE][RGSTR] Registering CUSTOM callback [" .. callback_name .. "] for [".. context.event.name .. "]")
                    RegisterScriptCallback(callback_name,activate_oneshot_event(context.event, callback_name))
                end
            end
        end
    end
end

local function update_settings()
    -- NPE FLAGS
    Dialog_in_use = false
    Dialog_name = nil
    -- NPE Settings
    Settings.debug_logs = npe_mcm.npe_get_setting("general", "debug_logs")
    Settings.enable = npe_mcm.npe_get_setting("general", "enable")
    Settings.execution_loop = npe_mcm.npe_get_setting("general", "execution_loop")
    Settings.play_loop = npe_mcm.npe_get_setting("general", "play_loop")  
    Settings.sounds_set = npe_mcm.npe_get_setting("general", "sounds_set")  
    Settings.pause_game = npe_mcm.npe_get_setting("general", "pause_game")  
end

local function first_time_initialization()
    printlog("//[NPE][EXEC] First time initialization")
    -- npe Settings
    update_settings()
    
   -- update the npeConfig table with the Settings from the MCM
   update_decks_from_mcm()
   apply_overrides_to_decks()
   -- Use the function to print the npeConfig.decks table
   printlog("//[NPE][LOG] Decks")
   print_table(npeConfig.decks)
   printlog("//[NPE][LOG] Decks list Ended")

   -- update the queue with the contexts from the npeConfig table
   update_activation_queue()

    -- register the queued contexts with the npe_events
   Register_npe_callbacks()
   
   -- Use the function to print the npeSetsActivationQueue table
   printlog("//[NPE][LOG] Activation Queue:")
   print_table(npeSetsActivationQueue.contexts)
   printlog("//[NPE][LOG] Activation Queue list Ended")

end

local function npe_actor_on_first_update()
    printlog("//[NPE][EXEC] Actor on first update")
    -- initialize npe configuration
    first_time_initialization()

    -- starting all loops
    Resume_execution()    
    resume_context_countdowns_loop()

    -- activate the contexts on EVENT.GAME_START
    Activate_contexts_on(npe.EVENT.GAME_START)
end

local function mcm_on_option_change()
    printdebug("//[NPE][EXEC] On option change")
    -- pausing all loops
    Pause_Execution()
    pause_context_countdowns_loop()

    -- update npe configuration
    update_settings()

    update_decks_from_mcm()
    
    apply_overrides_to_decks()

    -- Use the function to print the npeConfig.decks table
    printdebug("//[NPE][LOG] Decks:")
    debug_table(npeConfig.decks)
    printdebug("//[NPE][LOG] Decks list Ended")

    -- upcate the queue with the contexts from the npeConfig table
    update_activation_queue()

    -- Use the function to print the npeSetsActivationQueue table
    printdebug("//[NPE][LOG] Activation Queue:")
    debug_table(npeSetsActivationQueue.contexts)
    printdebug("//[NPE][LOG] Activation Queue list Ended")
    -- register the queued contexts with the npe_events
    Register_npe_callbacks()

    -- resume all loops
    Resume_execution()
    resume_context_countdowns_loop()
end

local function teardown_npe()
    printlog("//[NPE][EXEC] Teardown")
	if Dialog_in_use then
        tear_down_dialog()
	end
    remove_context_countdowns_loop()
    remove_execution_loop()
    remove_play_queues_manager_loop()
end

function on_game_start()
    RegisterScriptCallback("on_option_change", mcm_on_option_change)
    RegisterScriptCallback("actor_on_first_update", npe_actor_on_first_update)
    RegisterScriptCallback("actor_on_net_destroy", teardown_npe)
    RegisterScriptCallback("actor_on_before_death",teardown_npe)
end