
local printlog = npe.printlog
local printdebug = npe.printdebug

GUI = nil -- instance, don't touch

local GAMETIME_STATE = {
	STOPPED = 0,
	INMOTION = 1 
}

function actor_on_first_update()
	local RENDERER = get_console_cmd(0,"renderer")
	if (RENDERER == 'renderer_r1') then
		local hud = get_hud()
		local cs = hud:GetCustomStatic("dx8_fill_shader")
		if (not cs) then
			printdbg("- UINewPlayerExperience | Started dx8_fill_shader")
			hud:AddCustomStatic("dx8_fill_shader")
		end
	end
end

function on_game_start()
end

function change_gametime_to(state)
	exec_console_cmd("time_factor " .. state)
end

function play(set)
	if set == nil then
		printlog("[NPE] play set is nil")
		return
	end

    printlog("[NPE] play set: " .. set.module)
    exec_console_cmd("main_menu off")
    change_gametime_to(GAMETIME_STATE.STOPPED)


    printlog("[NPE] creating GUI")
    GUI = UINewPlayerExperience(set)

	if (GUI) and (not GUI:IsShown()) then
        printlog("[NPE] showing GUI")
		GUI:ShowDialog(true)
		Register_UI("UINewPlayerExperience","npe_dialog")
    else
        printlog("[NPE] GUI already shown")
    end
end

local xml = nil
function loadUIStatic(set)
	printlog("[NPE] loadUIStatic")
	if not xml then
		printlog("[NPE] loading ui_npe_dialog.xml")
		xml = CScriptXmlInit()
		xml:ParseFile("ui_npe_dialog.xml")
	end
end

-------------------------------------------------------------------
class "UINewPlayerExperience" (CUIScriptWnd)

function UINewPlayerExperience:__init(set) super()
	self:InitControls(set)
end

function UINewPlayerExperience:__finalize()
end

function UINewPlayerExperience:InitControls(set)
    printlog("[NPE] InitControls")
	self:SetWndRect			(Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)
	self.set = set
    loadUIStatic(set)
    self.xml = xml
	self.dialog	= xml:InitStatic("ui_npe_dialog", self)
	self.frame	= xml:InitFrame("ui_npe_dialog:frame", self.dialog)
	
	-- card context
	self.cardIndex = 1
	if self.set.cards[self.cardIndex] then
		
		local text
		if self.set.cards[self.cardIndex].title then
			text = game.translate_string(self.set.cards[self.cardIndex].title)
		else
			text = game.translate_string(self.set.title)
		end
		self.card_title = xml:InitTextWnd("ui_npe_dialog:card_title",self.dialog)
		self.card_title:SetText(text)
	
		self.top_line = xml:InitStatic("ui_npe_dialog:top_line",self.dialog)

		self.card_description = xml:InitTextWnd("ui_npe_dialog:card_description",self.dialog)
		text = game.translate_string(self.set.cards[self.cardIndex].description)
		self.card_description:SetText(text)

		self.card_image = xml:InitStatic("ui_npe_dialog:card_image",self.dialog)
		self.card_image:InitTexture(self.set.cards[self.cardIndex].image)
	end

    self.bottom_line = xml:InitStatic("ui_npe_dialog:bottom_line",self.dialog)

    self.card_index = xml:InitTextWnd("ui_npe_dialog:card_index",self.dialog)
	local max_card = #self.set.cards > 3 and 3 or #self.set.cards
	self.card_index:SetText(self.cardIndex .. "/" .. max_card)

    self.btn_close = xml:Init3tButton("ui_npe_dialog:btn_close", self.dialog)
	self:Register(self.btn_close, "btn_close")	
	self:AddCallback("btn_close", ui_events.BUTTON_CLICKED, self.OnButtonClose, self)

    self.btn_next = xml:Init3tButton("ui_npe_dialog:btn_next", self.dialog)
	self:Register(self.btn_next, "btn_next")	
	self:AddCallback("btn_next", ui_events.BUTTON_CLICKED, self.OnButtonNext, self)

    self.btn_prev = xml:Init3tButton("ui_npe_dialog:btn_prev", self.dialog)
    self:Register(self.btn_prev, "btn_prev")	
	self:AddCallback("btn_prev", ui_events.BUTTON_CLICKED, self.OnButtonPrev, self)

	self:UpdateButtons()
end

function UINewPlayerExperience:UpdateButtons()
	printlog("[NPE] UpdateButtons")
	self.btn_prev:Show(true)
	self.btn_next:Show(true)
	if self.cardIndex == 1 then
		self.btn_prev:Show(false)
	else
		self.btn_prev:Show(true)
	end

	if self.cardIndex == 3 or self.cardIndex == #self.set.cards then
		self.btn_next:Show(false)
	else
		self.btn_next:Show(true)
	end

end

function UINewPlayerExperience:OnButtonClose()
    self:Close()
end

function UINewPlayerExperience:OnButtonNext()
    printlog("[NPE] OnButtonNext")
	self.cardIndex = self.cardIndex + 1
	if self.cardIndex <= #self.set.cards and self.cardIndex <= 3 and self.set.cards[self.cardIndex] then
		local text
		if self.set.cards[self.cardIndex].title then
			text = game.translate_string(self.set.cards[self.cardIndex].title)
		else
			text = game.translate_string(self.set.title)
		end
		self.card_title:SetText(text)
	
		text = game.translate_string(self.set.cards[self.cardIndex].description)
		self.card_description:SetText(text)

		self.card_image:InitTexture(self.set.cards[self.cardIndex].image)
		local max_card = #self.set.cards > 3 and 3 or #self.set.cards
		self.card_index:SetText(self.cardIndex .. "/" .. max_card)
	else
		self.cardIndex = 3
	end
	self:UpdateButtons()
end

function UINewPlayerExperience:OnButtonPrev()
    printlog("[NPE] OnButtonPrev")
	self.cardIndex = self.cardIndex - 1
	if self.cardIndex > 0 and self.set.cards[self.cardIndex] then
		local text
		if self.set.cards[self.cardIndex].title then
			text = game.translate_string(self.set.cards[self.cardIndex].title)
		else
			text = game.translate_string(self.set.title)
		end
		self.card_title:SetText(text)
	
		text = game.translate_string(self.set.cards[self.cardIndex].description)
		self.card_description:SetText(text)

		self.card_image:InitTexture(self.set.cards[self.cardIndex].image)

		local max_card = #self.set.cards > 3 and 3 or #self.set.cards
		self.card_index:SetText(self.cardIndex .. "/" .. max_card)
	else
		self.cardIndex = 1
	end
	self:UpdateButtons()
end

function UINewPlayerExperience:Close()
	self:HideDialog()
	self:Show(false)
	Unregister_UI("UINewPlayerExperience")
	GUI = nil    
    change_gametime_to(GAMETIME_STATE.INMOTION)
end

function UINewPlayerExperience:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	if (res == false) then
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				printlog("[NPE] OnKeyboard DIK_ESCAPE")
				self:Close()
			end
		end
    end
    return res
end